{"version":3,"file":"api.js","sources":["src/globals/globals.js","node_modules/metal/src/coreNamed.js","node_modules/metal/src/core.js","node_modules/metal/src/array/array.js","node_modules/metal/src/async/async.js","node_modules/metal/src/disposable/Disposable.js","node_modules/metal/src/object/object.js","node_modules/metal/src/string/string.js","src/api-query/Embodied.js","src/api-query/FilterBody.js","src/api-query/Geo.js","src/api-query/Range.js","src/api-query/Filter.js","node_modules/metal-uri/src/parseFromAnchor.js","node_modules/metal-uri/src/parse.js","node_modules/metal-structs/src/MultiMap.js","node_modules/metal-structs/src/TreeNode.js","node_modules/metal-uri/src/Uri.js","src/api/assertions.js","src/api/auth/Auth.js","src/api/ApiHelper.js","src/api/auth/AuthProvider.js","src/api/auth/FacebookAuthProvider.js","src/api/auth/GithubAuthProvider.js","src/api/auth/GoogleAuthProvider.js","node_modules/metal-storage/src/mechanism/StorageMechanism.js","node_modules/metal-storage/src/Storage.js","node_modules/metal-storage/src/mechanism/LocalStorageMechanism.js","src/api/auth/AuthApiHelper.js","src/api-query/Aggregation.js","src/api-query/Query.js","src/api/data/DataApiHelper.js","src/crypt/Base64.js","node_modules/metal-promise/src/promise/Promise.js","node_modules/metal-ajax/src/Ajax.js","src/api/Transport.js","src/api/ClientMessage.js","src/api/ClientResponse.js","src/api/browser/AjaxTransport.js","src/api/TransportFactory.js","src/api/ClientRequest.js","src/api/WeDeploy.js","src/env/browser.js"],"sourcesContent":["var globals = {};\n\nif (typeof window !== 'undefined') {\n\tglobals.window = window;\n}\n\nif (typeof document !== 'undefined') {\n\tglobals.document = document;\n}\n\nexport default globals;\n","'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = 'core_' + ((Math.random() * 1e9) >>> 0);\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Loops constructor super classes collecting its properties values. If\n * property is not available on the super class `undefined` will be\n * collected as value for the class hierarchy position.\n * @param {!function()} constructor Class constructor.\n * @param {string} propertyName Property name to be collected.\n * @return {Array.<*>} Array of collected values.\n * TODO(*): Rethink superclass loop.\n */\nexport function collectSuperClassesProperty(constructor, propertyName) {\n\tvar propertyValues = [constructor[propertyName]];\n\twhile (constructor.__proto__ && !constructor.__proto__.isPrototypeOf(Function)) {\n\t\tconstructor = constructor.__proto__;\n\t\tpropertyValues.push(constructor[propertyName]);\n\t}\n\treturn propertyValues;\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tvar str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tvar id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tvar type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Merges the values of a export function property a class with the values of that\n * property for all its super classes, and stores it as a new static\n * property of that class. If the export function property already existed, it won't\n * be recalculated.\n * @param {!function()} constructor Class constructor.\n * @param {string} propertyName Property name to be collected.\n * @param {function(*, *):*=} opt_mergeFn Function that receives an array filled\n *   with the values of the property for the current class and all its super classes.\n *   Should return the merged value to be stored on the current class.\n * @return {boolean} Returns true if merge happens, false otherwise.\n */\nexport function mergeSuperClassesProperty(constructor, propertyName, opt_mergeFn) {\n\tvar mergedName = propertyName + '_MERGED';\n\tif (constructor.hasOwnProperty(mergedName)) {\n\t\treturn false;\n\t}\n\n\tvar merged = collectSuperClassesProperty(constructor, propertyName);\n\tif (opt_mergeFn) {\n\t\tmerged = opt_mergeFn(merged);\n\t}\n\tconstructor[mergedName] = merged;\n\treturn true;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport { core };\nexport * from './coreNamed';\n","'use strict';\n\nimport { isDef } from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tvar i = arr.indexOf(obj);\n\t\tvar rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tvar sliced = [];\n\t\tvar end = isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/*!\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nvar async = {};\n\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} opt_context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, opt_context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(\n\t\tnew async.run.WorkItem_(callback, opt_context));\n};\n\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tvar workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (var i = 0; i < workItems.length; i++) {\n\t\t\tvar workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} opt_context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, opt_context) {\n\tvar cb = callback;\n\tif (opt_context) {\n\t\tcb = callback.bind(opt_context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Introduced and currently only supported by IE10.\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof setImmediate === 'function') {\n\t\tsetImmediate(cb);\n\t\treturn;\n\t}\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tvar Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (typeof Channel === 'undefined' && typeof window !== 'undefined' &&\n\t\twindow.postMessage && window.addEventListener) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tvar iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tvar win = iframe.contentWindow;\n\t\t\tvar doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tvar message = 'callImmediate' + Math.random();\n\t\t\tvar origin = win.location.protocol + '//' + win.location.host;\n\t\t\tvar onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tvar channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tvar head = {};\n\t\tvar tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tvar cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (typeof document !== 'undefined' && 'onreadystatechange' in\n\t\tdocument.createElement('script')) {\n\t\treturn function(cb) {\n\t\t\tvar script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(opt_returnValue) {\n\treturn opt_returnValue;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tvar key, source;\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tvar scope = opt_obj || window;\n\t\tvar parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tvar mappedObj = {};\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar keys1 = Object.keys(obj1);\n\t\tvar keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t  var test1 = String(str1).toLowerCase();\n\t  var test2 = String(str2).toLowerCase();\n\n\t  if (test1 < test2) {\n\t    return -1;\n\t  } else if (test1 === test2) {\n\t    return 0;\n\t  } else {\n\t    return 1;\n\t  }\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str.replace(/[\\t\\r\\n ]+/g, ' ').replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t* Escapes characters in the string that are not safe to use in a RegExp.\n\t* @param {*} str The string to escape. If not a string, it will be casted\n\t*     to one.\n\t* @return {string} A RegExp safe, escaped copy of {@code s}.\n\t*/\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08');\n\t}\n\n\t/**\n\t* Returns a string with at least 64-bits of randomness.\n\t* @return {string} A random string, e.g. sn1s7vb4gcic.\n\t*/\n\tstatic getRandomString() {\n\t\tvar x = 2147483648;\n\t\treturn Math.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tvar hash = 0;\n\t\tfor (var i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\n/**\n * Class responsible for storing an object that will be printed as JSON\n * when the `toString` method is called.\n */\nclass Embodied {\n\t/**\n\t * Constructs a Embodied instance.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.body_ = {};\n\t}\n\n\t/**\n\t * Gets the json object that represents this instance.\n\t * @return {!Object}\n\t */\n\tbody() {\n\t\treturn this.body_;\n\t}\n\n\t/**\n\t * If the given object is an instance of Embodied, this will\n\t * return its body content. Otherwise this will return the\n\t * original object.\n\t * @param {*} obj\n\t * @return {*}\n\t * @static\n\t */\n\tstatic toBody(obj) {\n\t\treturn (obj instanceof Embodied) ? obj.body() : obj;\n\t}\n\n\t/**\n\t * Gets the json string that represents this instance.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.body());\n\t}\n}\n\nexport default Embodied;\n","'use strict';\n\nimport { core } from 'metal';\nimport Embodied from './Embodied';\n\n/**\n * Class responsible for storing and handling the body contents\n * of a Filter instance.\n */\nclass FilterBody {\n\t/**\n\t * Constructs a {@link FilterBody} instance.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} operatorOrValue If a third param is given, this should\n\t *   be the filter's operator (like \">=\"). Otherwise, this will be\n\t *   used as the filter's value, and the filter's operator will be \"=\".\n\t * @param {*=} opt_value The filter's value.\n\t * @constructor\n\t */\n\tconstructor(field, operatorOrValue, opt_value) {\n\t\tvar obj = {\n\t\t\toperator: core.isDef(opt_value) ? operatorOrValue : '='\n\t\t};\n\n\t\tvar value = core.isDef(opt_value) ? opt_value : operatorOrValue;\n\n\t\tif (core.isDefAndNotNull(value)) {\n\t\t\tif (value instanceof Embodied) {\n\t\t\t\tvalue = value.body();\n\t\t\t}\n\t\t\tobj.value = value;\n\t\t}\n\n\t\tif (core.isDefAndNotNull(field)) {\n\t\t\tthis.createBody_(field, obj);\n\t\t} else {\n\t\t\tthis.createBody_('and', []);\n\t\t}\n\n\t}\n\n\t/**\n\t * Composes the current filter with the given operator.\n\t * @param {string} operator\n\t * @param {Filter=} opt_filter Another filter to compose this filter with,\n\t *   if the operator is not unary.\n\t */\n\tadd(operator, opt_filter) {\n\t\tif (opt_filter) {\n\t\t\tthis.addArrayOperator_(operator, opt_filter);\n\t\t} else {\n\t\t\tthis.createBody_(operator, this.body_);\n\t\t}\n\t}\n\n\t/**\n\t * Composes the current filter with an operator that stores its values in an array.\n\t * @param {string} operator\n\t * @param {!Filter} filter\n\t * @protected\n\t */\n\taddArrayOperator_(operator, filter) {\n\t\tif (!(this.body_[operator] instanceof Array)) {\n\t\t\tthis.createBody_(operator, [this.body_]);\n\t\t}\n\t\tthis.body_[operator].push(filter.body());\n\t}\n\n\t/**\n\t * Adds filters to be composed with this filter body using the given operator.\n\t * @param {string} operator\n\t * @param {...*} filters A variable amount of filters to be composed.\n\t */\n\taddMany(operator, ...filters) {\n\t\tfor (var i = 0; i < filters.length; i++) {\n\t\t\tthis.add(operator, filters[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new body object, setting the requestd key to the given value.\n\t * @param {string} key The key to set in the new body object\n\t * @param {*} value The value the requested key should have in the new body object.\n\t * @protected\n\t */\n\tcreateBody_(key, value) {\n\t\tthis.body_ = {};\n\t\tthis.body_[key] = value;\n\t}\n\n\t/**\n\t * Gets the json object that represents this filter's body.\n\t * @return {!Object}\n\t */\n\tgetObject() {\n\t\treturn this.body_;\n\t}\n}\n\nexport default FilterBody;\n","'use strict';\n\nimport Embodied from './Embodied';\n\n/**\n * Class responsible for building different types of geometric\n * shapes.\n */\nclass Geo {\n\t/**\n\t * Creates a new {@link BoundingBox} instance.\n\t * @param {*} upperLeft The upper left point.\n\t * @param {*} lowerRight The lower right point.\n\t * @return {!BoundingBox}\n\t * @static\n\t */\n\tstatic boundingBox(upperLeft, lowerRight) {\n\t\treturn new Geo.BoundingBox(upperLeft, lowerRight);\n\t}\n\n\t/**\n\t * Creates a new {@link Circle} instance.\n\t * @param {*} center The circle's center coordinate.\n\t * @param {string} radius The circle's radius.\n\t * @return {!Circle}\n\t * @static\n\t */\n\tstatic circle(center, radius) {\n\t\treturn new Geo.Circle(center, radius);\n\t}\n\n\t/**\n\t * Creates a new {@link Line} instance.\n\t * @param {...*} points This line's points.\n\t * @return {!Line}\n\t * @static\n\t */\n\tstatic line(...points) {\n\t\treturn new Geo.Line(...points);\n\t}\n\n\t/**\n\t * Creates a new {@link Point} instance.\n\t * @param {number} lat The latitude coordinate\n\t * @param {number} lon The longitude coordinate\n\t * @return {!Point}\n\t * @static\n\t */\n\tstatic point(lat, lon) {\n\t\treturn new Geo.Point(lat, lon);\n\t}\n\n\t/**\n\t * Creates a new {@link Polygon} instance.\n\t * @param {...*} points This polygon's points.\n\t * @return {!Polygon}\n\t * @static\n\t */\n\tstatic polygon(...points) {\n\t\treturn new Geo.Polygon(...points);\n\t}\n}\n\n/**\n * Class that represents a point coordinate.\n * @extends {Embodied}\n */\nclass Point extends Embodied {\n\t/**\n\t * Constructs a {@link Point} instance.\n\t * @param {number} lat The latitude coordinate\n\t * @param {number} lon The longitude coordinate\n\t * @constructor\n\t */\n\tconstructor(lat, lon) {\n\t\tsuper();\n\t\tthis.body_ = [lat, lon];\n\t}\n}\nGeo.Point = Point;\n\n/**\n * Class that represents a line.\n * @extends {Embodied}\n */\nclass Line extends Embodied {\n\t/**\n\t * Constructs a {@link Line} instance.\n\t * @param {...*} points This line's points.\n\t * @constructor\n\t */\n\tconstructor(...points) {\n\t\tsuper();\n\t\tthis.body_ = {\n\t\t\ttype: 'linestring',\n\t\t\tcoordinates: points.map(point => Embodied.toBody(point))\n\t\t};\n\t}\n}\nGeo.Line = Line;\n\n/**\n * Class that represents a bounding box.\n * @extends {Embodied}\n */\nclass BoundingBox extends Embodied {\n\t/**\n\t * Constructs a {@link BoundingBox} instance.\n\t * @param {*} upperLeft The upper left point.\n\t * @param {*} lowerRight The lower right point.\n\t * @constructor\n\t */\n\tconstructor(upperLeft, lowerRight) {\n\t\tsuper();\n\t\tthis.body_ = {\n\t\t\ttype: 'envelope',\n\t\t\tcoordinates: [Embodied.toBody(upperLeft), Embodied.toBody(lowerRight)]\n\t\t};\n\t}\n\n\t/**\n\t * Gets this bounding box's points.\n\t * @return {!Array}\n\t */\n\tgetPoints() {\n\t\treturn this.body_.coordinates;\n\t}\n}\nGeo.BoundingBox = BoundingBox;\n\n/**\n * Class that represents a circle.\n * @extends {Embodied}\n */\nclass Circle extends Embodied {\n\t/**\n\t * Constructs a {@link Circle} instance.\n\t * @param {*} center The circle's center coordinate.\n\t * @param {string} radius The circle's radius.\n\t * @constructor\n\t */\n\tconstructor(center, radius) {\n\t\tsuper();\n\t\tthis.body_ = {\n\t\t\ttype: 'circle',\n\t\t\tcoordinates: Embodied.toBody(center),\n\t\t\tradius: radius\n\t\t};\n\t}\n\n\t/**\n\t * Gets this circle's center coordinate.\n\t * @return {*}\n\t */\n\tgetCenter() {\n\t\treturn this.body_.coordinates;\n\t}\n\n\t/**\n\t * Gets this circle's radius.\n\t * @return {string}\n\t */\n\tgetRadius() {\n\t\treturn this.body_.radius;\n\t}\n}\nGeo.Circle = Circle;\n\n/**\n * Class that represents a polygon.\n * @extends {Embodied}\n */\nclass Polygon extends Embodied {\n\t/**\n\t * Constructs a {@link Polygon} instance.\n\t * @param {...*} points This polygon's points.\n\t * @constructor\n\t */\n\tconstructor(...points) {\n\t\tsuper();\n\t\tthis.body_ = {\n\t\t\ttype: 'polygon',\n\t\t\tcoordinates: []\n\t\t};\n\t\tthis.addCoordinates_(...points);\n\t}\n\n\t/**\n\t * Adds the given points as coordinates for this polygon.\n\t * @param {...*} points\n\t * @protected\n\t */\n\taddCoordinates_(...points) {\n\t\tthis.body_.coordinates.push(points.map(point => Embodied.toBody(point)));\n\t}\n\n\t/**\n\t * Adds the given points as a hole inside this polygon.\n\t * @param  {...*} points\n\t * @chainnable\n\t */\n\thole(...points) {\n\t\tthis.addCoordinates_(...points);\n\t\treturn this;\n\t}\n}\nGeo.Polygon = Polygon;\n\nexport default Geo;\n","'use strict';\n\nimport { core } from 'metal';\nimport Embodied from './Embodied';\n\n/**\n * Class responsible for building range objects to be used by `Filter`.\n * @extends {Embodied}\n */\nclass Range extends Embodied {\n\t/**\n\t * Constructs a {@link Range} instance.\n\t * @param {*} from\n\t * @param {*} opt_to\n\t * @constructor\n\t */\n\tconstructor(from, opt_to) {\n\t\tsuper();\n\t\tif (core.isDefAndNotNull(from)) {\n\t\t\tthis.body_.from = from;\n\t\t}\n\t\tif (core.isDefAndNotNull(opt_to)) {\n\t\t\tthis.body_.to = opt_to;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a {@link Range} instance.\n\t * @param {*} from\n\t * @return {!Range}\n\t * @static\n\t */\n\tstatic from(from) {\n\t\treturn new Range(from);\n\t}\n\n\t/**\n\t * Constructs a {@link Range} instance.\n\t * @param {*} from\n\t * @param {*} to\n\t * @return {!Range}\n\t * @static\n\t */\n\tstatic range(from, to) {\n\t\treturn new Range(from, to);\n\t}\n\n\t/**\n\t * Constructs a {@link Range} instance.\n\t * @param {*} to\n\t * @return {!Range}\n\t * @static\n\t */\n\tstatic to(to) {\n\t\treturn new Range(null, to);\n\t}\n}\n\nexport default Range;\n","'use strict';\n\nimport { core } from 'metal';\nimport Embodied from './Embodied';\nimport FilterBody from './FilterBody';\nimport Geo from './Geo';\nimport Range from './Range';\n\n/**\n * Class responsible for building filters.\n * @extends {Embodied}\n */\nclass Filter extends Embodied {\n\t/**\n\t * Constructs a {@link Filter} instance.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} operatorOrValue If a third param is given, this should\n\t *   be the filter's operator (like \">=\"). Otherwise, this will be\n\t *   used as the filter's value, and the filter's operator will be \"=\".\n\t * @param {*=} opt_value The filter's value.\n\t * @constructor\n\t */\n\tconstructor(field, operatorOrValue, opt_value) {\n\t\tsuper();\n\t\tthis.body_ = new FilterBody(field, operatorOrValue, opt_value);\n\t}\n\n\t/**\n\t * Adds a filter to be composed with this filter using the given operator.\n\t * @param {string} operator\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or the\n\t *   name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainnable\n\t */\n\tadd(operator, fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\tvar filter = fieldOrFilter ? Filter.toFilter(fieldOrFilter, opt_operatorOrValue, opt_value) : null;\n\t\tthis.body_.add(operator, filter);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds filters to be composed with this filter using the given operator.\n\t * @param {string} operator\n\t * @param {...*} filters A variable amount of filters to be composed.\n\t * @chainnable\n\t */\n\taddMany(operator, ...filters) {\n\t\tthis.body_.addMany(operator, ...filters);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a filter to be composed with this filter using the \"and\" operator.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or the\n\t *   name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainnable\n\t */\n\tand(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\treturn this.add('and', fieldOrFilter, opt_operatorOrValue, opt_value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"any\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {!(Array|...*)} values A variable amount of values to be used with\n\t *   the \"none\" operator. Can be passed either as a single array or as\n\t *   separate params.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic any(field) {\n\t\tvar values = Array.prototype.slice.call(arguments, 1);\n\t\tif (values.length === 1 && values[0] instanceof Array) {\n\t\t\tvalues = values[0];\n\t\t}\n\t\treturn new Filter(field, 'any', values);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"gp\" operator.\n\t * This is a special use case of `Filter.polygon` for bounding\n\t * boxes.\n\t * @param {string} field The field's name.\n\t * @param {*} boxOrUpperLeft Either a `Geo.BoundingBox` instance, or\n\t *   a bounding box's upper left coordinate.\n\t * @param {*=} opt_lowerRight A bounding box's lower right coordinate.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic boundingBox(field, boxOrUpperLeft, opt_lowerRight) {\n\t\tif (boxOrUpperLeft instanceof Geo.BoundingBox) {\n\t\t\treturn Filter.polygon(field, ...boxOrUpperLeft.getPoints());\n\t\t} else {\n\t\t\treturn Filter.polygon(field, boxOrUpperLeft, opt_lowerRight);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the json object that represents this filter.\n\t * @return {!Object}\n\t */\n\tbody() {\n\t\treturn this.body_.getObject();\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"gd\" operator.\n\t * @param {string} field The field's name.\n\t * @param {*} locationOrCircle Either a `Geo.Circle` instance or a coordinate.\n\t * @param {Range|string=} opt_rangeOrDistance Either a `Range` instance or\n\t *   the distance value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic distance(field, locationOrCircle, opt_rangeOrDistance) {\n\t\tvar location = locationOrCircle;\n\t\tvar range = opt_rangeOrDistance;\n\t\tif (locationOrCircle instanceof Geo.Circle) {\n\t\t\tlocation = locationOrCircle.getCenter();\n\t\t\trange = Range.to(locationOrCircle.getRadius());\n\t\t} else if (!(opt_rangeOrDistance instanceof Range)) {\n\t\t\trange = Range.to(opt_rangeOrDistance);\n\t\t}\n\t\treturn Filter.distanceInternal_(field, location, range);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"gd\" operator. This\n\t * is just an internal helper used by `Filter.distance`.\n\t * @param {string} field The field's name.\n\t * @param {*} location A location coordinate.\n\t * @param {Range} range A `Range` instance.\n\t * @return {!Filter}\n\t * @protected\n\t * @static\n\t */\n\tstatic distanceInternal_(field, location, range) {\n\t\tvar value = {\n\t\t\tlocation: Embodied.toBody(location)\n\t\t};\n\t\trange = range.body();\n\t\tif (range.from) {\n\t\t\tvalue.min = range.from;\n\t\t}\n\t\tif (range.to) {\n\t\t\tvalue.max = range.to;\n\t\t}\n\t\treturn Filter.field(field, 'gd', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"=\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic equal(field, value) {\n\t\treturn new Filter(field, '=', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"exists\" operator.\n\t * @param {string} field The field's name.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic exists(field) {\n\t\treturn Filter.field(field, 'exists', null);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"fuzzy\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t *   should be the query string, in which case all fields will be matched.\n\t *   Otherwise, this should be the name of the field to match.\n\t * @param {string|number=} opt_queryOrFuzziness If this is a string, it should\n\t *   be the query, otherwise it should be the fuzziness value.\n\t * @param {number=} opt_fuzziness The fuzziness value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic fuzzy(fieldOrQuery, opt_queryOrFuzziness, opt_fuzziness) {\n\t\treturn Filter.fuzzyInternal_('fuzzy', fieldOrQuery, opt_queryOrFuzziness, opt_fuzziness);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the given fuzzy operator. This\n\t * is an internal implementation used by the `Filter.fuzzy` method.\n\t * @param {string} operator The fuzzy operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t *   should be the query string, in which case all fields will be matched.\n\t *   Otherwise, this should be the name of the field to match.\n\t * @param {string|number=} opt_queryOrFuzziness If this is a string, it should\n\t *   be the query, otherwise it should be the fuzziness value.\n\t * @param {number=} opt_fuzziness The fuzziness value.\n\t * @return {!Filter}\n\t * @protected\n\t * @static\n\t */\n\tstatic fuzzyInternal_(operator, fieldOrQuery, opt_queryOrFuzziness, opt_fuzziness) {\n\t\tvar arg2IsString = core.isString(opt_queryOrFuzziness);\n\n\t\tvar value = {\n\t\t\tquery: arg2IsString ? opt_queryOrFuzziness : fieldOrQuery\n\t\t};\n\t\tvar fuzziness = arg2IsString ? opt_fuzziness : opt_queryOrFuzziness;\n\t\tif (fuzziness) {\n\t\t\tvalue.fuzziness = fuzziness;\n\t\t}\n\n\t\tvar field = arg2IsString ? fieldOrQuery : Filter.ALL;\n\t\treturn Filter.field(field, operator, value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \">\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic gt(field, value) {\n\t\treturn new Filter(field, '>', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \">=\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic gte(field, value) {\n\t\treturn new Filter(field, '>=', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"match\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t *   should be the query string, in which case all fields will be matched.\n\t *   Otherwise, this should be the name of the field to match.\n\t * @param {string=} opt_query The query string.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic match(fieldOrQuery, opt_query) {\n\t\tvar field = core.isString(opt_query) ? fieldOrQuery : Filter.ALL;\n\t\tvar query = core.isString(opt_query) ? opt_query : fieldOrQuery;\n\t\treturn Filter.field(field, 'match', query);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"missing\" operator.\n\t * @param {string} field The field's name.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic missing(field) {\n\t\treturn Filter.field(field, 'missing', null);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"phrase\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t *   should be the query string, in which case all fields will be matched.\n\t *   Otherwise, this should be the name of the field to match.\n\t * @param {string=} opt_query The query string.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic phrase(fieldOrQuery, opt_query) {\n\t\tvar field = core.isString(opt_query) ? fieldOrQuery : Filter.ALL;\n\t\tvar query = core.isString(opt_query) ? opt_query : fieldOrQuery;\n\t\treturn Filter.field(field, 'phrase', query);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"gp\" operator.\n\t * @param {string} field The name of the field.\n\t * @param {...!Object} points Objects representing points in the polygon.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic polygon(field, ...points) {\n\t\tpoints = points.map(point => Embodied.toBody(point));\n\t\treturn Filter.field(field, 'gp', points);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"prefix\" operator.\n\t * @param {string} fieldOrQuery If no second argument is given, this should\n\t *   be the query string, in which case all fields will be matched. Otherwise,\n\t *   this should be the name of the field to match.\n\t * @param {string=} opt_query The query string.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic prefix(fieldOrQuery, opt_query) {\n\t\tvar field = opt_query ? fieldOrQuery : Filter.ALL;\n\t\tvar query = opt_query ? opt_query : fieldOrQuery;\n\t\treturn Filter.field(field, 'prefix', query);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"range\" operator.\n\t * @param {string} field The field's name.\n\t * @param {*} rangeOrMin Either a `Range` instance or a the range's min value.\n\t * @param {*=} opt_max The range's max value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic range(field, rangeOrMin, opt_max) {\n\t\tvar range = rangeOrMin;\n\t\tif (!(range instanceof Range)) {\n\t\t\trange = Range.range(rangeOrMin, opt_max);\n\t\t}\n\t\treturn Filter.field(field, 'range', range);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"~\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic regex(field, value) {\n\t\treturn new Filter(field, '~', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"gs\" operator.\n\t * @param {string} field The field's name.\n\t * @param {...!Object} shapes Objects representing shapes.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic shape(field, ...shapes) {\n\t\tshapes = shapes.map(shape => Embodied.toBody(shape));\n\t\tvar value = {\n\t\t\ttype: 'geometrycollection',\n\t\t\tgeometries: shapes\n\t\t};\n\t\treturn Filter.field(field, 'gs', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"similar\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t *   should be the query string, in which case all fields will be matched.\n\t *   Otherwise, this should be the name of the field to match.\n\t * @param {?string} query The query string.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic similar(fieldOrQuery, query) {\n\t\tvar field = core.isString(query) ? fieldOrQuery : Filter.ALL;\n\t\tvar value = {\n\t\t\tquery: core.isString(query) ? query : fieldOrQuery\n\t\t};\n\t\treturn Filter.field(field, 'similar', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"<\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic lt(field, value) {\n\t\treturn new Filter(field, '<', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"<=\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tstatic lte(field, value) {\n\t\treturn new Filter(field, '<=', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"none\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {!(Array|...*)} value A variable amount of values to be used with\n\t * the \"none\" operator. Can be passed either as a single array or as\n\t * separate params.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic none(field) {\n\t\tvar values = Array.prototype.slice.call(arguments, 1);\n\t\tif (values.length === 1 && values[0] instanceof Array) {\n\t\t\tvalues = values[0];\n\t\t}\n\t\treturn new Filter(field, 'none', values);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"!=\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic notEqual(field, value) {\n\t\treturn new Filter(field, '!=', value);\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"not\" operator.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or\n\t * the name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic not(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\treturn Filter.toFilter(fieldOrFilter, opt_operatorOrValue, opt_value).add('not');\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} operatorOrValue If a third param is given, this should be the\n\t * filter's operator (like \">=\"). Otherwise, this will be used as the\n\t * filter's value, and the filter's operator will be \"=\".\n\t * @param {*=} opt_value The filter's value.\n\t * @return {!Filter}\n\t * @static\n\t */\n\tstatic field(field, operatorOrValue, opt_value) {\n\t\treturn new Filter(field, operatorOrValue, opt_value);\n\t}\n\n\t/**\n\t * Adds a filter to be composed with this filter using the \"or\" operator.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or\n\t * the name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainnable\n\t */\n\tor(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\treturn this.add('or', fieldOrFilter, opt_operatorOrValue, opt_value);\n\t}\n\n\t/**\n\t * Converts the given arguments into a {@link Filter} instance.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or\n\t * the name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @return {!Filter}\n\t */\n\tstatic toFilter(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\tvar filter = fieldOrFilter;\n\t\tif (!(filter instanceof Filter)) {\n\t\t\tfilter = Filter.field(fieldOrFilter, opt_operatorOrValue, opt_value);\n\t\t}\n\t\treturn filter;\n\t}\n}\n\n/**\n * String constant that represents all fields.\n * @type {string}\n * @static\n */\nFilter.ALL = '*';\n\nexport default Filter;\n","'use strict';\n\n/**\n * Parses the given uri string into an object.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parseFromAnchor(opt_uri) {\n\tvar link = document.createElement('a');\n\tlink.href = opt_uri;\n\treturn {\n\t\thash: link.hash,\n\t\thostname: link.hostname,\n\t\tpassword: link.password,\n\t\tpathname: link.pathname[0] === '/' ? link.pathname : '/' + link.pathname,\n\t\tport: link.port,\n\t\tprotocol: link.protocol,\n\t\tsearch: link.search,\n\t\tusername: link.username\n\t};\n}\n\nexport default parseFromAnchor;\n","'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\treturn new URL(opt_uri);\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Generic tree node data structure with arbitrary number of child nodes.\n * @param {V} value Value.\n * @constructor\n */\nclass TreeNode {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * The value.\n\t\t * @private {V}\n\t\t */\n\t\tthis.value_ = value;\n\n\t\t/**\n\t\t * Reference to the parent node or null if it has no parent.\n\t\t * @private {TreeNode}\n\t\t */\n\t\tthis.parent_ = null;\n\n\t\t/**\n\t\t * Child nodes or null in case of leaf node.\n\t\t * @private {Array<!TreeNode>}\n\t\t */\n\t\tthis.children_ = null;\n\t}\n\n\t/**\n\t * Appends a child node to this node.\n\t * @param {!TreeNode} child Orphan child node.\n\t */\n\taddChild(child) {\n\t\tassertChildHasNoParent(child);\n\t\tchild.setParent(this);\n\t\tthis.children_ = this.children_ || [];\n\t\tthis.children_.push(child);\n\t}\n\n\t/**\n\t * Tells whether this node is the ancestor of the given node.\n\t * @param {!TreeNode} node A node.\n\t * @return {boolean} Whether this node is the ancestor of {@code node}.\n\t */\n\tcontains(node) {\n\t\tlet current = node.getParent();\n\t\twhile (current) {\n\t\t\tif (current === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrent = current.getParent();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {!Array<TreeNode>} All ancestor nodes in bottom-up order.\n\t */\n\tgetAncestors() {\n\t\tlet ancestors = [];\n\t\tlet node = this.getParent();\n\t\twhile (node) {\n\t\t\tancestors.push(node);\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Gets the child node of this node at the given index.\n\t * @param {number} index Child index.\n\t * @return {?TreeNode} The node at the given index\n\t * or null if not found.\n\t */\n\tgetChildAt(index) {\n\t\treturn this.getChildren()[index] || null;\n\t}\n\n\t/**\n\t * @return {?Array<!TreeNode>} Child nodes or null in case of leaf node.\n\t */\n\tgetChildren() {\n\t\treturn this.children_ || TreeNode.EMPTY_ARRAY;\n\t}\n\n\t/**\n\t * @return {number} The number of children.\n\t */\n\tgetChildCount() {\n\t\treturn this.getChildren().length;\n\t}\n\n\t/**\n\t * @return {number} The number of ancestors of the node.\n\t */\n\tgetDepth() {\n\t\tlet depth = 0;\n\t\tlet node = this;\n\t\twhile (node.getParent()) {\n\t\t\tdepth++;\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn depth;\n\t}\n\n\t/**\n\t * @return {?TreeNode} Parent node or null if it has no parent.\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * @return {!TreeNode} The root of the tree structure, i.e. the farthest\n\t * ancestor of the node or the node itself if it has no parents.\n\t */\n\tgetRoot() {\n\t\tlet root = this;\n\t\twhile (root.getParent()) {\n\t\t\troot = root.getParent();\n\t\t}\n\t\treturn root;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return {V} The value.\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * @return {boolean} Whether the node is a leaf node.\n\t */\n\tisLeaf() {\n\t\treturn !this.getChildCount();\n\t}\n\n\t/**\n\t * Removes the given child node of this node.\n\t * @param {TreeNode} child The node to remove.\n\t * @return {TreeNode} The removed node if any, null otherwise.\n\t */\n\tremoveChild(child) {\n\t\tif (array.remove(this.getChildren(), child)) {\n\t\t\treturn child;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the parent node of this node. The callers must ensure that the\n\t * parent node and only that has this node among its children.\n\t * @param {TreeNode} parent The parent to set. If null, the node will be\n\t * detached from the tree.\n\t * @protected\n\t */\n\tsetParent(parent) {\n\t\tthis.parent_ = parent;\n\t}\n\n\t/**\n\t * Traverses the subtree. The first callback starts with this node,\n\t * and visits the descendant nodes depth-first, in preorder.\n\t * The second callback, starts with deepest child then visits\n\t * the ancestor nodes depth-first, in postorder. E.g.\n\t *\n\t *  \t A\n\t *    / \\\n\t *   B   C\n\t *  /   / \\\n\t * D   E   F\n\t *\n\t * preorder -> ['A', 'B', 'D', 'C', 'E', 'F']\n\t * postorder -> ['D', 'B', 'E', 'F', 'C', 'A']\n\t *\n\t * @param {function=} opt_preorderFn The callback to execute when visiting a node.\n\t * @param {function=} opt_postorderFn The callback to execute before leaving a node.\n\t */\n\ttraverse(opt_preorderFn, opt_postorderFn) {\n\t\tif (opt_preorderFn) {\n\t\t\topt_preorderFn(this);\n\t\t}\n\t\tthis.getChildren().forEach((child) => child.traverse(opt_preorderFn, opt_postorderFn));\n\t\tif (opt_postorderFn) {\n\t\t\topt_postorderFn(this);\n\t\t}\n\t}\n\n}\n\n/**\n * Constant for empty array to avoid unnecessary allocations.\n * @private\n */\nTreeNode.EMPTY_ARRAY = [];\n\n/**\n * Asserts that child has no parent.\n * @param {TreeNode} child A child.\n * @private\n */\nconst assertChildHasNoParent = function(child) {\n\tif (child.getParent()) {\n\t\tthrow new Error('Cannot add child with parent.');\n\t}\n};\n\nexport default TreeNode;\n","'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Normalizes the parsed object to be in the expected standard.\n\t * @param {!Object}\n\t */\n\tstatic normalizeObject(parsed) {\n\t\tvar length = parsed.pathname ? parsed.pathname.length : 0;\n\t\tif (length > 1 && parsed.pathname[length - 1] === '/') {\n\t\t\tparsed.pathname = parsed.pathname.substr(0, length - 1);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn Uri.normalizeObject(parseFn_(opt_uri));\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nUri.DEFAULT_PROTOCOL = 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n","'use strict';\n\nimport { core } from 'metal';\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\nfunction assertBrowserEnvironment() {\n\tif (!globals.window) {\n\t\tthrow new Error('Sign-in type not supported in this environment');\n\t}\n}\n\nfunction assertDefAndNotNull(value, errorMessage) {\n\tif (!core.isDefAndNotNull(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\nfunction assertNotNull(value, errorMessage) {\n\tif (core.isNull(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\nfunction assertFunction(value, errorMessage) {\n\tif (!core.isFunction(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\nfunction assertObject(value, errorMessage) {\n\tif (!core.isObject(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\nfunction assertResponseSucceeded(response) {\n\tif (!response.succeeded()) {\n\t\tthrow response.body();\n\t}\n\treturn response;\n}\n\nfunction assertUserSignedIn(user) {\n\tif (!core.isDefAndNotNull(user)) {\n\t\tthrow new Error('You must be signed-in to perform this operation');\n\t}\n}\n\nfunction assertUriWithNoPath(url, message) {\n\tvar uri = new Uri(url);\n\tif (uri.getPathname().length > 1) {\n\t\tthrow new Error(message);\n\t}\n}\n\nexport { assertBrowserEnvironment, assertDefAndNotNull, assertNotNull, assertFunction, assertObject, assertResponseSucceeded, assertUserSignedIn, assertUriWithNoPath };\n","'use strict';\n\nimport { core } from 'metal';\n\nimport { assertDefAndNotNull, assertObject, assertResponseSucceeded } from '../assertions';\n\n/**\n * Class responsible for storing authorization information.\n */\nclass Auth {\n\t/**\n\t * Constructs an {@link Auth} instance.\n\t * @param {string} tokenOrEmail Either the authorization token, or\n\t *   the username.\n\t * @param {string=} opt_password If a username is given as the first param,\n\t *   this should be the password.\n\t * @constructor\n\t */\n\tconstructor(tokenOrEmail, opt_password = null) {\n\t\tthis.token = core.isString(opt_password) ? null : tokenOrEmail;\n\t\tthis.email = core.isString(opt_password) ? tokenOrEmail : null;\n\t\tthis.password = opt_password;\n\n\t\tthis.createdAt = null;\n\t\tthis.id = null;\n\t\tthis.name = null;\n\t\tthis.photoUrl = null;\n\t\tthis.wedeployClient = null;\n\t}\n\n\t/**\n\t * Constructs an {@link Auth} instance.\n\t * @param {string} tokenOrUsername Either the authorization token, or\n\t *   the username.\n\t * @param {string=} opt_password If a username is given as the first param,\n\t *   this should be the password.\n\t * @return {!Auth}\n\t */\n\tstatic create(tokenOrUsername, opt_password) {\n\t\treturn new Auth(tokenOrUsername, opt_password);\n\t}\n\n\t/**\n\t * Gets the created at date.\n\t * @return {string}\n\t */\n\tgetCreatedAt() {\n\t\treturn this.createdAt;\n\t}\n\n\t/**\n\t * Gets the email.\n\t * @return {string}\n\t */\n\tgetEmail() {\n\t\treturn this.email;\n\t}\n\n\t/**\n\t * Gets the id.\n\t * @return {string}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the name.\n\t * @return {string}\n\t */\n\tgetName() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Gets the password.\n\t * @return {string}\n\t */\n\tgetPassword() {\n\t\treturn this.password;\n\t}\n\n\t/**\n\t * Gets the photo url.\n\t * @return {string}\n\t */\n\tgetPhotoUrl() {\n\t\treturn this.photoUrl;\n\t}\n\n\t/**\n\t * Gets the token.\n\t * @return {string}\n\t */\n\tgetToken() {\n\t\treturn this.token;\n\t}\n\n\t/**\n\t * Checks if created at is set.\n\t * @return {boolean}\n\t */\n\thasCreatedAt() {\n\t\treturn core.isDefAndNotNull(this.createdAt);\n\t}\n\n\t/**\n\t * Checks if the email is set.\n\t * @return {boolean}\n\t */\n\thasEmail() {\n\t\treturn core.isDefAndNotNull(this.email);\n\t}\n\n\t/**\n\t * Checks if the id is set.\n\t * @return {boolean}\n\t */\n\thasId() {\n\t\treturn core.isDefAndNotNull(this.id);\n\t}\n\n\t/**\n\t * Checks if the name is set.\n\t * @return {boolean}\n\t */\n\thasName() {\n\t\treturn core.isDefAndNotNull(this.name);\n\t}\n\n\t/**\n\t * Checks if the password is set.\n\t * @return {boolean}\n\t */\n\thasPassword() {\n\t\treturn core.isDefAndNotNull(this.password);\n\t}\n\n\t/**\n\t * Checks if the photo url is set.\n\t * @return {boolean}\n\t */\n\thasPhotoUrl() {\n\t\treturn core.isDefAndNotNull(this.photoUrl);\n\t}\n\n\t/**\n\t * Checks if the token is set.\n\t * @return {boolean}\n\t */\n\thasToken() {\n\t\treturn core.isDefAndNotNull(this.token);\n\t}\n\n\t/**\n\t * Sets created at.\n\t * @param {string} createdAt\n\t */\n\tsetCreatedAt(createdAt) {\n\t\tthis.createdAt = createdAt;\n\t}\n\n\t/**\n\t * Sets the email.\n\t * @param {string} email\n\t */\n\tsetEmail(email) {\n\t\tthis.email = email;\n\t}\n\n\t/**\n\t * Sets the id.\n\t * @param {string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the name.\n\t * @param {string} name\n\t */\n\tsetName(name) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Sets the password.\n\t * @param {string} password\n\t */\n\tsetPassword(password) {\n\t\tthis.password = password;\n\t}\n\n\t/**\n\t * Sets the photo url.\n\t * @param {string} photoUrl\n\t */\n\tsetPhotoUrl(photoUrl) {\n\t\tthis.photoUrl = photoUrl;\n\t}\n\n\t/**\n\t * Sets the token.\n\t * @param {string} token\n\t */\n\tsetToken(token) {\n\t\tthis.token = token;\n\t}\n\n\tsetWedeployClient(wedeployClient) {\n\t\tthis.wedeployClient = wedeployClient;\n\t}\n\n\t/**\n\t * Updates the user.\n\t * @param {!object} data\n\t * @return {CompletableFuture}\n\t */\n\tupdateUser(data) {\n\t\tassertObject(data, 'User data must be specified as object');\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/users', this.getId().toString())\n\t\t\t.auth(this)\n\t\t\t.patch(data)\n\t\t\t.then(response => assertResponseSucceeded(response));\n\t}\n\n\t/**\n\t * Deletes the current user.\n\t * @return {CompletableFuture}\n\t */\n\tdeleteUser() {\n\t\tassertDefAndNotNull(this.getId(), 'Cannot delete user without id');\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/users', this.getId().toString())\n\t\t\t.auth(this)\n\t\t\t.delete()\n\t\t\t.then(response => assertResponseSucceeded(response));\n\t}\n}\n\nexport default Auth;\n","'use strict';\n\nimport Auth from './auth/Auth';\nimport { assertDefAndNotNull } from './assertions';\n\nclass ApiHelper {\n\n\t/**\n\t * Constructs an {@link ApiHelper} instance.\n\t * @constructor\n\t */\n\tconstructor(wedeployClient) {\n\t\tassertDefAndNotNull(wedeployClient, 'WeDeploy client reference must be specified');\n\t\tthis.wedeployClient = wedeployClient;\n\t}\n\n\t/**\n\t * Adds authorization information to this request.\n\t * @param {!Auth|string} authOrTokenOrEmail Either an {@link Auth} instance,\n\t * an authorization token, or the email.\n\t * @param {string=} opt_password If a email is given as the first param,\n\t * this should be the password.\n\t * @chainable\n\t */\n\tauth(authOrTokenOrEmail, opt_password) {\n\t\tthis.helperAuthScope = authOrTokenOrEmail;\n\t\tif (!(this.helperAuthScope instanceof Auth)) {\n\t\t\tthis.helperAuthScope = Auth.create(authOrTokenOrEmail, opt_password);\n\t\t}\n\t\treturn this;\n\t}\n\n}\n\nexport default ApiHelper;\n","'use strict';\n\nimport { core } from 'metal';\nimport Uri from 'metal-uri';\n\n/**\n * Class responsible for encapsulate provider information.\n */\nclass AuthProvider {\n\t/**\n\t * Constructs an {@link AuthProvider} instance.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.provider = null;\n\t\tthis.providerScope = null;\n\t\tthis.redirectUri = null;\n\t\tthis.scope = null;\n\t}\n\n\t/**\n\t * Checks if provider is defined and not null.\n\t * @return {boolean}\n\t */\n\thasProvider() {\n\t\treturn core.isDefAndNotNull(this.provider);\n\t}\n\n\t/**\n\t * Checks if scope is defined and not null.\n\t * @return {boolean}\n\t */\n\thasProviderScope() {\n\t\treturn core.isDefAndNotNull(this.providerScope);\n\t}\n\n\t/**\n\t * Checks if redirect uri is defined and not null.\n\t * @return {boolean}\n\t */\n\thasRedirectUri() {\n\t\treturn core.isDefAndNotNull(this.redirectUri);\n\t}\n\n\t/**\n\t * Checks if scope is defined and not null.\n\t * @return {boolean}\n\t */\n\thasScope() {\n\t\treturn core.isDefAndNotNull(this.scope);\n\t}\n\n\t/**\n\t * Makes authorization url.\n\t * @return {string=} Authorization url.\n\t */\n\tmakeAuthorizationUrl(opt_authUrl) {\n\t\tvar uri = new Uri(opt_authUrl);\n\n\t\turi.setPathname('/oauth/authorize');\n\n\t\tif (this.hasProvider()) {\n\t\t\turi.setParameterValue('provider', this.getProvider());\n\t\t}\n\t\tif (this.hasProviderScope()) {\n\t\t\turi.setParameterValue('provider_scope', this.getProviderScope());\n\t\t}\n\t\tif (this.hasRedirectUri()) {\n\t\t\turi.setParameterValue('redirect_uri', this.getRedirectUri());\n\t\t}\n\t\tif (this.hasScope()) {\n\t\t\turi.setParameterValue('scope', this.getScope());\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets provider name.\n\t * @return {string=} Provider name.\n\t */\n\tgetProvider() {\n\t\treturn this.provider;\n\t}\n\n\t/**\n\t * Gets provider scope.\n\t * @return {string=} String with scopes.\n\t */\n\tgetProviderScope() {\n\t\treturn this.providerScope;\n\t}\n\n\t/**\n\t * Gets redirect uri.\n\t * @return {string=}.\n\t */\n\tgetRedirectUri() {\n\t\treturn this.redirectUri;\n\t}\n\n\t/**\n\t * Gets scope.\n\t * @return {string=} String with scopes.\n\t */\n\tgetScope() {\n\t\treturn this.scope;\n\t}\n\n\t/**\n\t * Sets provider scope.\n\t * @param {string=} scope Scope string. Separate by space for multiple\n\t *   scopes, e.g. \"scope1 scope2\".\n\t */\n\tsetProviderScope(providerScope) {\n\t\tassertStringIfDefAndNotNull(providerScope, 'Provider scope must be a string');\n\t\tthis.providerScope = providerScope;\n\t}\n\n\t/**\n\t * Sets redirect uri.\n\t * @param {string=} redirectUri.\n\t */\n\tsetRedirectUri(redirectUri) {\n\t\tassertStringIfDefAndNotNull(redirectUri, 'Redirect uri must be a string');\n\t\tthis.redirectUri = redirectUri;\n\t}\n\n\t/**\n\t * Sets scope.\n\t * @param {string=} scope Scope string. Separate by space for multiple\n\t *   scopes, e.g. \"scope1 scope2\".\n\t */\n\tsetScope(scope) {\n\t\tassertStringIfDefAndNotNull(scope, 'Scope must be a string');\n\t\tthis.scope = scope;\n\t}\n}\n\nfunction assertStringIfDefAndNotNull(value, errorMessage) {\n\tif (core.isDefAndNotNull(value) && !core.isString(value)) {\n\t\tthrow new Error(errorMessage);\n\t}\n}\n\nexport default AuthProvider;\n","'use strict';\n\nimport AuthProvider from './AuthProvider';\n\n/**\n * Facebook auth provider implementation.\n */\nclass FacebookAuthProvider extends AuthProvider {\n\t/**\n\t * Constructs an {@link FacebookAuthProvider} instance.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.provider = FacebookAuthProvider.PROVIDER;\n\t}\n}\n\nFacebookAuthProvider.PROVIDER = 'facebook';\n\nexport default FacebookAuthProvider;\n","'use strict';\n\nimport AuthProvider from './AuthProvider';\n\n/**\n * Github auth provider implementation.\n */\nclass GithubAuthProvider extends AuthProvider {\n\t/**\n\t * Constructs an {@link GithubAuthProvider} instance.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.provider = GithubAuthProvider.PROVIDER;\n\t}\n}\n\nGithubAuthProvider.PROVIDER = 'github';\n\nexport default GithubAuthProvider;\n","'use strict';\n\nimport AuthProvider from './AuthProvider';\n\n/**\n * Google auth provider implementation.\n */\nclass GoogleAuthProvider extends AuthProvider {\n\t/**\n\t * Constructs an {@link GoogleAuthProvider} instance.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.provider = GoogleAuthProvider.PROVIDER;\n\t}\n}\n\nGoogleAuthProvider.PROVIDER = 'google';\n\nexport default GoogleAuthProvider;\n","'use strict';\n\n/* jshint ignore:start */\n\n/**\n * Abstract interface for storing and retrieving data using some persistence\n * mechanism.\n * @constructor\n */\nclass StorageMechanism {\n\t/**\n\t * Clear all items from the data storage.\n\t */\n\tclear() {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Sets an item in the data storage.\n\t * @param {string} key The key to set.\n\t * @param {*} value The value to serialize to a string and save.\n\t */\n\tset(key, value) {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Gets an item from the data storage.\n\t * @param {string} key The key to get.\n\t * @return {*} Deserialized value or undefined if not found.\n\t */\n\tget(key) {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Checks if this mechanism is supported in the current environment.\n\t * Subclasses should override this when necessary.\n\t */\n\tstatic isSupported() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the list of keys stored in the Storage object.\n\t * @param {!Array<string>} keys\n\t */\n\tkeys() {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Removes an item from the data storage.\n\t * @param {string} key The key to remove.\n\t */\n\tremove(key) {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Returns the number of data items stored in the Storage object.\n\t * @return {number}\n\t */\n\tsize() {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n}\n\nexport default StorageMechanism;\n\n/* jshint ignore:end */\n","'use strict';\n\nimport core from 'metal';\nimport StorageMechanism from './mechanism/StorageMechanism';\n\nclass Storage {\n\n\t/**\n\t * Provides a convenient API for data persistence using a selected data\n\t * storage mechanism.\n\t * @param {!StorageMechanism} mechanism The underlying storage mechanism.\n\t * @constructor\n\t */\n\tconstructor(mechanism) {\n\t\tassertMechanismDefAndNotNull(mechanism);\n\t\tassertMechanismIntanceOf(mechanism);\n\n\t\t/**\n\t\t * The mechanism used to persist key-value pairs.\n\t\t * @type {StorageMechanism}\n\t\t * @protected\n\t\t */\n\t\tthis.mechanism = mechanism;\n\t}\n\n\t/**\n\t * Clear all items from the data storage.\n\t */\n\tclear() {\n\t\tthis.mechanism.clear();\n\t}\n\n\t/**\n\t * Sets an item in the data storage.\n\t * @param {string} key The key to set.\n\t * @param {*} value The value to serialize to a string and save.\n\t */\n\tset(key, value) {\n\t\tif (!core.isDef(value)) {\n\t\t\tthis.mechanism.remove(key);\n\t\t\treturn;\n\t\t}\n\t\tthis.mechanism.set(key, JSON.stringify(value));\n\t}\n\n\t/**\n\t * Gets an item from the data storage.\n\t * @param {string} key The key to get.\n\t * @return {*} Deserialized value or undefined if not found.\n\t */\n\tget(key) {\n\t\tvar json;\n\t\ttry {\n\t\t\tjson = this.mechanism.get(key);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (core.isNull(json)) {\n\t\t\treturn undefined;\n\t\t}\n\t\ttry {\n\t\t\treturn JSON.parse(json);\n\t\t} catch (e) {\n\t\t\tthrow Storage.ErrorCode.INVALID_VALUE;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the list of keys stored in the Storage object.\n\t * @param {!Array<string>} keys\n\t */\n\tkeys() {\n\t\treturn this.mechanism.keys();\n\t}\n\n\t/**\n\t * Removes an item from the data storage.\n\t * @param {string} key The key to remove.\n\t */\n\tremove(key) {\n\t\tthis.mechanism.remove(key);\n\t}\n\n\t/**\n\t * Returns the number of data items stored in the Storage object.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.mechanism.size();\n\t}\n\n\t/**\n\t * Returns the list of values stored in the Storage object.\n\t * @param {!Array<string>} values\n\t */\n\tvalues() {\n\t\treturn this.keys().map((key) => this.get(key));\n\t}\n}\n\n/**\n * Errors thrown by the storage.\n * @enum {string}\n */\nStorage.ErrorCode = {\n\tINVALID_VALUE: 'Storage: Invalid value was encountered'\n};\n\nfunction assertMechanismDefAndNotNull(mechanism) {\n\tif (!core.isDefAndNotNull(mechanism)) {\n\t\tthrow Error('Storage mechanism is required');\n\t}\n}\n\nfunction assertMechanismIntanceOf(mechanism) {\n\tif (!(mechanism instanceof StorageMechanism)) {\n\t\tthrow Error('Storage mechanism must me an implementation of StorageMechanism');\n\t}\n}\n\nexport default Storage;\n","'use strict';\n\nimport StorageMechanism from './StorageMechanism';\n\n/**\n * Abstract interface for storing and retrieving data using some persistence\n * mechanism.\n * @constructor\n */\nclass LocalStorageMechanism extends StorageMechanism {\n\t/**\n\t * Returns reference for global local storage. by default\n\t */\n\tstorage() {\n\t\treturn LocalStorageMechanism.globals.localStorage;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tclear() {\n\t\tthis.storage().clear();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tkeys() {\n\t\treturn Object.keys(this.storage());\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget(key) {\n\t\treturn this.storage().getItem(key);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic isSupported() {\n\t\treturn typeof window !== 'undefined';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremove(key) {\n\t\tthis.storage().removeItem(key);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tset(key, value) {\n\t\tthis.storage().setItem(key, value);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tsize() {\n\t\treturn this.storage().length;\n\t}\n}\n\nif (LocalStorageMechanism.isSupported()) {\n\tLocalStorageMechanism.globals = {\n\t\tlocalStorage: window.localStorage\n\t};\n}\n\nexport default LocalStorageMechanism;\n","'use strict';\n\nimport Auth from './Auth';\nimport ApiHelper from '../ApiHelper';\nimport FacebookAuthProvider from './FacebookAuthProvider';\nimport GithubAuthProvider from './GithubAuthProvider';\nimport globals from '../../globals/globals';\nimport GoogleAuthProvider from './GoogleAuthProvider';\nimport { Storage, LocalStorageMechanism } from 'metal-storage';\n\nimport { assertDefAndNotNull, assertFunction, assertObject, assertUserSignedIn, assertBrowserEnvironment, assertResponseSucceeded } from '../assertions';\n\n/**\n * Class responsible for encapsulate auth api calls.\n */\nclass AuthApiHelper extends ApiHelper {\n\t/**\n\t * Constructs an {@link AuthApiHelper} instance.\n\t * @constructor\n\t */\n\tconstructor(wedeployClient) {\n\t\tsuper(wedeployClient);\n\n\t\tthis.currentUser = null;\n\t\tthis.onSignInCallback = null;\n\t\tthis.onSignOutCallback = null;\n\t\tif (LocalStorageMechanism.isSupported()) {\n\t\t\tthis.storage = new Storage(new LocalStorageMechanism());\n\t\t}\n\n\t\tthis.processSignIn_();\n\n\t\tthis.provider = {\n\t\t\tFacebook: FacebookAuthProvider,\n\t\t\tGoogle: GoogleAuthProvider,\n\t\t\tGithub: GithubAuthProvider\n\t\t};\n\t}\n\n\t/**\n\t * Creates user.\n\t * @param {!object} data The data to be used to create the user.\n\t * @return {CancellablePromise}\n\t */\n\tcreateUser(data) {\n\t\tassertObject(data, 'User data must be specified as object');\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/users')\n\t\t\t.post(data)\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => this.makeUserAuthFromData(response.body()));\n\t}\n\n\t/**\n\t * Gets the current browser url without the fragment part.\n\t * @return {!string}\n\t * @protected\n\t */\n\tgetHrefWithoutFragment_() {\n\t\tvar location = globals.window.location;\n\t\treturn location.protocol + '//' + location.host + location.pathname + (location.search ? location.search : '');\n\t}\n\n\t/**\n\t * Gets the access token from the url fragment and removes it.\n\t * @return {?string}\n\t * @protected\n\t */\n\tgetRedirectAccessToken_() {\n\t\tif (globals.window) {\n\t\t\tvar fragment = globals.window.location.hash;\n\t\t\tif (fragment.indexOf('#access_token=') === 0) {\n\t\t\t\treturn fragment.substring(14);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets user by id.\n\t * @param {!string} userId\n\t * @return {CancellablePromise}\n\t */\n\tgetUser(userId) {\n\t\tassertDefAndNotNull(userId, 'User userId must be specified');\n\t\tassertUserSignedIn(this.currentUser);\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/users', userId)\n\t\t\t.auth(this.resolveAuthScope().token)\n\t\t\t.get()\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => this.makeUserAuthFromData(response.body()));\n\t}\n\n\t/**\n\t * Loads current user. Requires a user token as argument.\n\t * @param {!string} token\n\t * @return {CancellablePromise}\n\t */\n\tloadCurrentUser(token) {\n\t\tassertDefAndNotNull(token, 'User token must be specified');\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/user')\n\t\t\t.auth(token)\n\t\t\t.get()\n\t\t\t.then(response => {\n\t\t\t\tvar data = response.body();\n\t\t\t\tdata.token = token;\n\t\t\t\tthis.currentUser = this.makeUserAuthFromData(data);\n\t\t\t\tif (this.storage) {\n\t\t\t\t\tthis.storage.set('currentUser', data);\n\t\t\t\t}\n\t\t\t\treturn this.currentUser;\n\t\t\t});\n\t}\n\n\t/**\n\t * Makes user Auth from data object.\n\t * @param {object} data\n\t * @return {Auth}\n\t * @protected\n\t */\n\tmakeUserAuthFromData(data) {\n\t\tvar auth = new Auth();\n\t\tauth.setWedeployClient(this.wedeployClient);\n\t\tauth.setCreatedAt(data.createdAt);\n\t\tauth.setEmail(data.email);\n\t\tauth.setId(data.id);\n\t\tauth.setName(data.name);\n\t\tauth.setPhotoUrl(data.photoUrl);\n\t\tauth.setToken(data.token);\n\t\treturn auth;\n\t}\n\n\t/**\n\t * Calls the on sign in callback if set.\n\t * @protected\n\t */\n\tmaybeCallOnSignInCallback_() {\n\t\tif (this.onSignInCallback) {\n\t\t\tthis.onSignInCallback.call(this, this.currentUser);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the on sign out callback if set.\n\t * @protected\n\t */\n\tmaybeCallOnSignOutCallback_() {\n\t\tif (this.onSignOutCallback) {\n\t\t\tthis.onSignOutCallback.call(this, this.currentUser);\n\t\t}\n\t}\n\n\t/**\n\t * Fires passed callback when a user sign-in. Note that it keeps only the\n\t * last callback passed.\n\t * @param {!Function} callback\n\t */\n\tonSignIn(callback) {\n\t\tassertFunction(callback, 'Sign-in callback must be a function');\n\t\tthis.onSignInCallback = callback;\n\t}\n\n\t/**\n\t * Fires passed callback when a user sign-out. Note that it keeps only the\n\t * last callback passed.\n\t * @param {!Function} callback\n\t */\n\tonSignOut(callback) {\n\t\tassertFunction(callback, 'Sign-out callback must be a function');\n\t\tthis.onSignOutCallback = callback;\n\t}\n\n\t/**\n\t * Processes sign-in by detecting a presence of a fragment\n\t * <code>#access_token=</code> in the url or, alternatively, by local\n\t * storage current user.\n\t */\n\tprocessSignIn_() {\n\t\tvar redirectAccessToken = this.getRedirectAccessToken_();\n\t\tif (redirectAccessToken) {\n\t\t\tthis.removeUrlFragmentCompletely_();\n\t\t\tthis.loadCurrentUser(redirectAccessToken)\n\t\t\t\t.then(() => this.maybeCallOnSignInCallback_());\n\t\t\treturn;\n\t\t}\n\t\tvar currentUser = this.storage && this.storage.get('currentUser');\n\t\tif (currentUser) {\n\t\t\tthis.currentUser = this.makeUserAuthFromData(currentUser);\n\t\t}\n\t}\n\n\t/**\n\t * Removes fragment from url by performing a push state to the current path.\n\t * @protected\n\t */\n\tremoveUrlFragmentCompletely_() {\n\t\tglobals.window.history.pushState({}, document.title, window.location.pathname + window.location.search);\n\t}\n\n\t/**\n\t * Resolves auth scope from last login or api helper.\n\t * @return {Auth}\n\t */\n\tresolveAuthScope() {\n\t\tif (this.helperAuthScope) {\n\t\t\treturn this.helperAuthScope;\n\t\t}\n\t\treturn this.currentUser;\n\t}\n\n\t/**\n\t * Sends password reset email to the specified email if found in database.\n\t * For security reasons call do not fail if email not found.\n\t * @param {!string} email\n\t * @return {CancellablePromise}\n\t */\n\tsendPasswordResetEmail(email) {\n\t\tassertDefAndNotNull(email, 'Send password reset email must be specified');\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/user/recover')\n\t\t\t.param('email', email)\n\t\t\t.post()\n\t\t\t.then(response => assertResponseSucceeded(response));\n\t}\n\n\t/**\n\t * Signs in using email and password.\n\t * @param {!string} email\n\t * @param {!string} password\n\t * @return {CancellablePromise}\n\t */\n\tsignInWithEmailAndPassword(email, password) {\n\t\tassertDefAndNotNull(email, 'Sign-in email must be specified');\n\t\tassertDefAndNotNull(password, 'Sign-in password must be specified');\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/oauth/token')\n\t\t\t.param('grant_type', 'password')\n\t\t\t.param('username', email)\n\t\t\t.param('password', password)\n\t\t\t.get()\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => this.loadCurrentUser(response.body().access_token))\n\t\t\t.then((user) => {\n\t\t\t\tthis.maybeCallOnSignInCallback_();\n\t\t\t\treturn user;\n\t\t\t});\n\t}\n\n\t/**\n\t * Signs in with redirect. Some providers and environment may not support\n\t * this flow.\n\t * @param {AuthProvider} provider\n\t */\n\tsignInWithRedirect(provider) {\n\t\tassertBrowserEnvironment();\n\t\tassertDefAndNotNull(provider, 'Sign-in provider must be defined');\n\t\tassertSupportedProvider(provider);\n\n\t\tif (!provider.hasRedirectUri()) {\n\t\t\tprovider.setRedirectUri(this.getHrefWithoutFragment_());\n\t\t}\n\t\tglobals.window.location.href = provider.makeAuthorizationUrl(this.wedeployClient.authUrl_);\n\t}\n\n\t/**\n\t * Signs out <code>currentUser</code> and removes from <code>localStorage</code>.\n\t * @return {CancellablePromise}\n\t */\n\tsignOut() {\n\t\tassertUserSignedIn(this.currentUser);\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.authUrl_)\n\t\t\t.path('/oauth/revoke')\n\t\t\t.param('token', this.currentUser.token)\n\t\t\t.get()\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => {\n\t\t\t\tthis.maybeCallOnSignOutCallback_();\n\t\t\t\tthis.unloadCurrentUser_();\n\t\t\t\treturn response;\n\t\t\t});\n\t}\n\n\t/**\n\t * Unloads all information for <code>currentUser</code> and removes from\n\t * <code>localStorage</code> if present.\n\t */\n\tunloadCurrentUser_() {\n\t\tthis.currentUser = null;\n\t\tif (this.storage) {\n\t\t\tthis.storage.remove('currentUser');\n\t\t}\n\t}\n}\n\nfunction assertSupportedProvider(provider) {\n\tswitch (provider.constructor.PROVIDER) {\n\t\tcase FacebookAuthProvider.PROVIDER:\n\t\tcase GithubAuthProvider.PROVIDER:\n\t\tcase GoogleAuthProvider.PROVIDER:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Sign-in provider not supported');\n\t}\n}\n\nexport default AuthApiHelper;\n","'use strict';\n\nimport Embodied from './Embodied';\nimport Range from './Range';\n\n/**\n * Class that represents a search aggregation.\n */\nclass Aggregation {\n\t/**\n\t * Constructs an {@link Aggregation} instance.\n\t * @param {string} field The aggregation field.\n\t * @param {string} operator The aggregation operator.\n\t * @param {*=} opt_value The aggregation value.\n\t * @constructor\n\t */\n\tconstructor(field, operator, opt_value) {\n\t\tthis.field_ = field;\n\t\tthis.operator_ = operator;\n\t\tthis.value_ = opt_value;\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"avg\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic avg(field) {\n\t\treturn Aggregation.field(field, 'avg');\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"count\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic count(field) {\n\t\treturn Aggregation.field(field, 'count');\n\t}\n\n\t/**\n\t * Creates an {@link DistanceAggregation} instance with the \"geoDistance\" operator.\n\t * @param {string} field The aggregation field.\n\t * @param {*} location The aggregation location.\n\t * @param {...!Range} ranges The aggregation ranges.\n\t * @return {!DistanceAggregation}\n\t * @static\n\t */\n\tstatic distance(field, location, ...ranges) {\n\t\treturn new Aggregation.DistanceAggregation(field, location, ...ranges);\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"extendedStats\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic extendedStats(field) {\n\t\treturn Aggregation.field(field, 'extendedStats');\n\t}\n\n\t/**\n\t * Gets this aggregation's field.\n\t * @return {string}\n\t */\n\tgetField() {\n\t\treturn this.field_;\n\t}\n\n\t/**\n\t * Gets this aggregation's operator.\n\t * @return {string}\n\t */\n\tgetOperator() {\n\t\treturn this.operator_;\n\t}\n\n\t/**\n\t * Gets this aggregation's value.\n\t * @return {*}\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"histogram\" operator.\n\t * @param {string} field The aggregation field.\n\t * @param {number} interval The histogram's interval.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic histogram(field, interval) {\n\t\treturn new Aggregation(field, 'histogram', interval);\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"max\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic max(field) {\n\t\treturn Aggregation.field(field, 'max');\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"min\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic min(field) {\n\t\treturn Aggregation.field(field, 'min');\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"missing\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic missing(field) {\n\t\treturn Aggregation.field(field, 'missing');\n\t}\n\n\t/**\n\t * Creates a new {@link Aggregation} instance.\n\t * @param {string} field The aggregation field.\n\t * @param {string} operator The aggregation operator.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic field(field, operator) {\n\t\treturn new Aggregation(field, operator);\n\t}\n\n\t/**\n\t * Creates an {@link RangeAggregation} instance with the \"range\" operator.\n\t * @param {string} field The aggregation field.\n\t * @param {...!Range} ranges The aggregation ranges.\n\t * @return {!RangeAggregation}\n\t * @static\n\t */\n\tstatic range(field, ...ranges) {\n\t\treturn new Aggregation.RangeAggregation(field, ...ranges);\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"stats\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic stats(field) {\n\t\treturn Aggregation.field(field, 'stats');\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"sum\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic sum(field) {\n\t\treturn Aggregation.field(field, 'sum');\n\t}\n\n\t/**\n\t * Creates an {@link Aggregation} instance with the \"terms\" operator.\n\t * @param {string} field The aggregation field.\n\t * @return {!Aggregation}\n\t * @static\n\t */\n\tstatic terms(field) {\n\t\treturn Aggregation.field(field, 'terms');\n\t}\n}\n\n/**\n * Class that represents a distance aggregation.\n * @extends {Aggregation}\n */\nclass DistanceAggregation extends Aggregation {\n\t/**\n\t * Constructs an {@link DistanceAggregation} instance.\n\t * @param {string} field The aggregation field.\n\t * @param {*} location The aggregation location.\n\t * @param {...!Range} ranges The aggregation ranges.\n\t * @constructor\n\t */\n\tconstructor(field, location, ...ranges) {\n\t\tsuper(field, 'geoDistance', {});\n\t\tthis.value_.location = Embodied.toBody(location);\n\t\tthis.value_.ranges = ranges.map(range => range.body());\n\t}\n\n\t/**\n\t * Adds a range to this aggregation.\n\t * @param {*} rangeOrFrom\n\t * @param {*=} opt_to\n\t * @chainnable\n\t */\n\trange(rangeOrFrom, opt_to) {\n\t\tvar range = rangeOrFrom;\n\t\tif (!(range instanceof Range)) {\n\t\t\trange = Range.range(rangeOrFrom, opt_to);\n\t\t}\n\t\tthis.value_.ranges.push(range.body());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets this aggregation's unit.\n\t * @param {string} unit\n\t * @chainnable\n\t */\n\tunit(unit) {\n\t\tthis.value_.unit = unit;\n\t\treturn this;\n\t}\n}\nAggregation.DistanceAggregation = DistanceAggregation;\n\n/**\n * Class that represents a range aggregation.\n * @extends {Aggregation}\n */\nclass RangeAggregation extends Aggregation {\n\t/**\n\t * Constructs an {@link RangeAggregation} instance.\n\t * @param {string} field The aggregation field.\n\t * @param {...!Range} ranges The aggregation ranges.\n\t * @constructor\n\t */\n\tconstructor(field, ...ranges) {\n\t\tsuper(field, 'range');\n\t\tthis.value_ = ranges.map(range => range.body());\n\t}\n\n\t/**\n\t * Adds a range to this aggregation.\n\t * @param {*} rangeOrFrom\n\t * @param {*=} opt_to\n\t * @chainnable\n\t */\n\trange(rangeOrFrom, opt_to) {\n\t\tvar range = rangeOrFrom;\n\t\tif (!(range instanceof Range)) {\n\t\t\trange = Range.range(rangeOrFrom, opt_to);\n\t\t}\n\t\tthis.value_.push(range.body());\n\t\treturn this;\n\t}\n}\nAggregation.RangeAggregation = RangeAggregation;\n\nexport default Aggregation;\n","'use strict';\n\nimport { core } from 'metal';\nimport Embodied from './Embodied';\nimport Filter from './Filter';\nimport Aggregation from './Aggregation';\n\n/**\n * Class responsible for building queries.\n * @extends {Embodied}\n */\nclass Query extends Embodied {\n\t/**\n\t * Adds an aggregation to this {@link Query} instance.\n\t * @param {string} name The aggregation name.\n\t * @param {!Aggregation|string} aggregationOrField Either an\n\t *   {@link Aggregation} instance or the name of the aggregation field.\n\t * @param {string=} opt_operator The aggregation operator.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic aggregate(name, aggregationOrField, opt_operator) {\n\t\treturn new Query().aggregate(name, aggregationOrField, opt_operator);\n\t}\n\n\t/**\n\t * Sets this query's type to \"count\".\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic count() {\n\t\treturn new Query().type('count');\n\t}\n\n\t/**\n\t * Sets this query's type to \"fetch\".\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic fetch() {\n\t\treturn new Query().type('fetch');\n\t}\n\n\t/**\n\t * Adds a filter to this Query.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} or the\n\t *   name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic filter(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\treturn new Query().filter(fieldOrFilter, opt_operatorOrValue, opt_value);\n\t}\n\n\t/**\n\t * Sets the query offset.\n\t * @param {number} offset The index of the first entry that should be returned\n\t *   by this query.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic offset(offset) {\n\t\treturn new Query().offset(offset);\n\t}\n\n\t/**\n\t * Adds a highlight entry to this {@link Query} instance.\n\t * @param {string} field The field's name.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic highlight(field) {\n\t\treturn new Query().highlight(field);\n\t}\n\n\t/**\n\t * Sets the query limit.\n\t * @param {number} limit The max amount of entries that this query should return.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic limit(limit) {\n\t\treturn new Query().limit(limit);\n\t}\n\n\t/**\n\t * Adds a search to this {@link Query} instance.\n\t * @param {!Filter|string} filterOrTextOrField If no other arguments\n\t *   are passed to this function, this should be either a {@link Filter}\n\t *   instance or a text to be used in a match filter. In both cases\n\t *   the filter will be applied to all fields. Another option is to\n\t *   pass this as a field name instead, together with other arguments\n\t *   so the filter can be created.\n\t * @param {string=} opt_textOrOperator Either a text to be used in a\n\t *   match filter, or the operator that should be used.\n\t * @param {*=} opt_value The value to be used by the filter. Should\n\t *   only be passed if an operator was passed as the second argument.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic search(filterOrTextOrField, opt_textOrOperator, opt_value) {\n\t\treturn new Query().search(filterOrTextOrField, opt_textOrOperator, opt_value);\n\t}\n\n\t/**\n\t * Adds a sort entry to this query, specifying the field this query should be\n\t * sorted by and, optionally, the sort direction.\n\t * @param {string} field The field that the query should be sorted by.\n\t * @param {string=} opt_direction The direction the sort operation should use.\n\t *   If none is given, \"asc\" is used by default.\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic sort(field, opt_direction) {\n\t\treturn new Query().sort(field, opt_direction);\n\t}\n\n\t/**\n\t * Sets the query type.\n\t * @param {string} type The query's type. For example: \"count\", \"fetch\".\n\t * @return {!Query}\n\t * @static\n\t */\n\tstatic type(type) {\n\t\treturn new Query().type(type);\n\t}\n\n\t/**\n\t * Adds an aggregation to this {@link Query} instance.\n\t * @param {string} name The aggregation name.\n\t * @param {!Aggregation|string} aggregationOrField Either an\n\t *   {@link Aggregation} instance or the name of the aggregation field.\n\t * @param {string=} opt_operator The aggregation operator.\n\t * @chainnable\n\t */\n\taggregate(name, aggregationOrField, opt_operator) {\n\t\tvar aggregation = aggregationOrField;\n\t\tif (!(aggregation instanceof Aggregation)) {\n\t\t\taggregation = Aggregation.field(aggregationOrField, opt_operator);\n\t\t}\n\n\t\tvar field = aggregation.getField();\n\t\tvar value = {};\n\t\tvalue[field] = {\n\t\t\tname: name,\n\t\t\toperator: aggregation.getOperator()\n\t\t};\n\t\tif (core.isDefAndNotNull(aggregation.getValue())) {\n\t\t\tvalue[field].value = aggregation.getValue();\n\t\t}\n\n\t\tif (!this.body_.aggregation) {\n\t\t\tthis.body_.aggregation = [];\n\t\t}\n\t\tthis.body_.aggregation.push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets this query's type to \"count\".\n\t * @chainnable\n\t */\n\tcount() {\n\t\treturn this.type('count');\n\t}\n\n\t/**\n\t * Sets this query's type to \"fetch\".\n\t * @chainnable\n\t */\n\tfetch() {\n\t\treturn this.type('fetch');\n\t}\n\n\t/**\n\t * Adds a filter to this Query.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} or the\n\t *   name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainnable\n\t */\n\tfilter(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\tlet filter = Filter.toFilter(fieldOrFilter, opt_operatorOrValue, opt_value);\n\t\tif (!this.body_.filter) {\n\t\t\tthis.body_.filter = [];\n\t\t}\n\t\tthis.body_.filter.push(filter.body());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the query offset.\n\t * @param {number} offset The index of the first entry that should be returned\n\t *   by this query.\n\t * @chainnable\n\t */\n\toffset(offset) {\n\t\tthis.body_.offset = offset;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a highlight entry to this {@link Query} instance.\n\t * @param {string} field The field's name.\n\t * @chainnable\n\t */\n\thighlight(field) {\n\t\tif (!this.body_.highlight) {\n\t\t\tthis.body_.highlight = [];\n\t\t}\n\n\t\tthis.body_.highlight.push(field);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the query limit.\n\t * @param {number} limit The max amount of entries that this query should return.\n\t * @chainnable\n\t */\n\tlimit(limit) {\n\t\tthis.body_.limit = limit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a search to this {@link Query} instance.\n\t * @param {!Filter|string} filterOrTextOrField If no other arguments\n\t *   are passed to this function, this should be either a {@link Filter}\n\t *   instance or a text to be used in a match filter. In both cases\n\t *   the filter will be applied to all fields. Another option is to\n\t *   pass this as a field name instead, together with other arguments\n\t *   so the filter can be created.\n\t * @param {string=} opt_textOrOperator Either a text to be used in a\n\t *   match filter, or the operator that should be used.\n\t * @param {*=} opt_value The value to be used by the filter. Should\n\t *   only be passed if an operator was passed as the second argument.\n\t * @chainnable\n\t */\n\tsearch(filterOrTextOrField, opt_textOrOperator, opt_value) {\n\t\tvar filter = filterOrTextOrField;\n\n\t\tif (opt_value) {\n\t\t\tfilter = Filter.field(filterOrTextOrField, opt_textOrOperator, opt_value);\n\t\t} else if (opt_textOrOperator) {\n\t\t\tfilter = Filter.match(filterOrTextOrField, opt_textOrOperator);\n\t\t} else if (!(filter instanceof Filter)) {\n\t\t\tfilter = Filter.match(filterOrTextOrField);\n\t\t}\n\n\t\tif (!this.body_.search) {\n\t\t\tthis.body_.search = [];\n\t\t}\n\n\t\tif (core.isDefAndNotNull(filterOrTextOrField)) {\n\t\t\tthis.body_.search.push(filter.body());\n\t\t} else {\n\t\t\tthis.body_.search.push({});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a sort entry to this query, specifying the field this query should be\n\t * sorted by and, optionally, the sort direction.\n\t * @param {string} field The field that the query should be sorted by.\n\t * @param {string=} opt_direction The direction the sort operation should use.\n\t *   If none is given, \"asc\" is used by default.\n\t * @chainnable\n\t */\n\tsort(field, opt_direction) {\n\t\tif (!this.body_.sort) {\n\t\t\tthis.body_.sort = [];\n\t\t}\n\t\tvar sortEntry = {};\n\t\tsortEntry[field] = opt_direction || 'asc';\n\t\tthis.body_.sort.push(sortEntry);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the query type.\n\t * @param {string} type The query's type. For example: \"count\", \"fetch\".\n\t * @chainnable\n\t */\n\ttype(type) {\n\t\tthis.body_.type = type;\n\t\treturn this;\n\t}\n}\n\nexport default Query;\n","'use strict';\n\nimport ApiHelper from '../ApiHelper';\nimport Query from '../../api-query/Query';\nimport Filter from '../../api-query/Filter';\nimport { assertDefAndNotNull, assertObject, assertResponseSucceeded } from '../assertions';\nimport { core } from 'metal';\n\n/**\n * Class responsible for encapsulate data api calls.\n */\nclass DataApiHelper extends ApiHelper {\n\t/**\n\t * Constructs an {@link DataApiHelper} instance.\n\t * @param {@link WeDeploy} instance.\n\t * @constructor\n\t */\n\tconstructor(wedeployClient) {\n\t\tsuper(wedeployClient);\n\t}\n\n\t/**\n\t * Adds a filter to this request's {@link Query}.\n\t * @param {!Filter|string} fieldOrFilter Either a Filter instance or the\n\t *   name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainable\n\t */\n\twhere(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\tthis.getOrCreateFilter_().and(fieldOrFilter, opt_operatorOrValue, opt_value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a filter to be composed with this filter using the \"or\" operator.\n\t * @param {!Filter|string} fieldOrFilter Either a {@link Filter} instance or\n\t *   the name of the field to filter by.\n\t * @param {*=} opt_operatorOrValue Either the field's operator or its value.\n\t * @param {*=} opt_value The filter's value.\n\t * @chainnable\n\t */\n\tor(fieldOrFilter, opt_operatorOrValue, opt_value) {\n\t\tif (this.getOrCreateFilter_().body().and.length === 0) {\n\t\t\tthrow Error('It\\'s required to have a condition before using an \\'or()\\' for the first time.');\n\t\t}\n\t\tthis.getOrCreateFilter_().or(fieldOrFilter, opt_operatorOrValue, opt_value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"none\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {!(Array|...*)} args A variable amount of values to be used with\n\t * the \"none\" operator. Can be passed either as a single array or as\n\t * separate params.\n\t * @chainnable\n\t */\n\tnone(field, ...args) {\n\t\treturn this.where(Filter.none(field, args));\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"match\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t * should be the query string, in which case all fields will be matched.\n\t * Otherwise, this should be the name of the field to match.\n\t * @param {string=} opt_query The query string.\n\t * @chainnable\n\t */\n\tmatch(field, value) {\n\t\treturn this.where(Filter.match(field, value));\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"similar\" operator.\n\t * @param {string} fieldOrQuery If no second string argument is given, this\n\t * should be the query string, in which case all fields will be matched.\n\t * Otherwise, this should be the name of the field to match.\n\t * @param {?string} query The query string.\n\t * @chainnable\n\t */\n\tsimilar(fieldOrQuery, query) {\n\t\treturn this.where(Filter.similar(fieldOrQuery, query));\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"<\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tlt(field, value) {\n\t\treturn this.where(Filter.lt(field, value));\n\t}\n\n\t/**\n\t * Returns a {@link Filter} instance that uses the \"<=\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {*} value The filter's value.\n\t * @return {!Filter}\n   * @static\n\t */\n\tlte(field, value) {\n\t\treturn this.where(Filter.lte(field, value));\n\t}\n\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"any\" operator.\n\t * @param {string} field The name of the field to filter by.\n\t * @param {!(Array|...*)} args A variable amount of values to be used with\n\t * the \"none\" operator. Can be passed either as a single array or as\n\t * separate params.\n\t * @chainnable\n\t */\n\tany(field, ...args) {\n\t\treturn this.where(Filter.any(field, args));\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"gp\" operator. This is a\n\t * special use case of `Filter.polygon` for bounding boxes.\n\t * @param {string} field The field's name.\n\t * @param {*} boxOrUpperLeft Either a `Geo.BoundingBox` instance, or a\n\t * bounding box's upper left coordinate.\n\t * @param {*=} opt_lowerRight A bounding box's lower right coordinate.\n\t * @chainnable\n\t */\n\tboundingBox(field, boxOrUpperLeft, opt_lowerRight) {\n\t\treturn this.where(Filter.boundingBox(field, boxOrUpperLeft, opt_lowerRight));\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"gd\" operator.\n\t * @param {string} field The field's name.\n\t * @param {*} locationOrCircle Either a `Geo.Circle` instance or a\n\t * coordinate.\n\t * @param {Range|string=} opt_rangeOrDistance Either a `Range` instance or\n\t * the distance value.\n\t * @return {!Filter}\n\t * @chainnable\n\t */\n\tdistance(field, locationOrCircle, opt_rangeOrDistance) {\n\t\treturn this.where(Filter.distance(field, locationOrCircle, opt_rangeOrDistance));\n\t}\n\n\t/**\n\t * Adds a filter to be compose with this filter using \"range\" operator.\n\t * @param {string} field The field's name.\n\t * @param {*} rangeOrMin Either a `Range` instance or a the range's min\n\t * value.\n\t * @param {*=} opt_max The range's max value.\n\t * @return {!Filter}\n\t * @chainnable\n\t */\n\trange(field, rangeOrMin, opt_max) {\n\t\treturn this.where(Filter.range(field, rangeOrMin, opt_max));\n\t}\n\n\t/**\n\t * Sets the limit for this request's {@link Query}.\n\t * @param {number} limit The max amount of entries that this request should return.\n\t * @chainable\n\t */\n\tlimit(limit) {\n\t\tthis.getOrCreateQuery_().limit(limit);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the offset for this request's {@link Query}.\n\t * @param {number} offset The index of the first entry that should be\n\t * returned by this query.\n\t * @chainable\n\t */\n\toffset(offset) {\n\t\tthis.getOrCreateQuery_().offset(offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a highlight entry to this request's {@link Query} instance.\n\t * @param {string} field The field's name.\n\t * @chainable\n\t */\n\thighlight(field) {\n\t\tthis.getOrCreateQuery_().highlight(field);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an aggregation to this {@link Query} instance.\n\t * @param {string} name The aggregation name.\n\t * @param {!Aggregation|string} aggregationOrField Either an {@link\n\t * Aggregation} instance or the name of the aggregation field.\n\t * @param {string=} opt_operator The aggregation operator.\n\t * @chainable\n\t */\n\taggregate(name, aggregationOrField, opt_operator) {\n\t\tthis.getOrCreateQuery_().aggregate(name, aggregationOrField, opt_operator);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets this request's query type to 'count'.\n\t * @chainnable\n\t */\n\tcount() {\n\t\tthis.getOrCreateQuery_().type('count');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a sort query to this request's body.\n\t * @param {string} field The field that the query should be sorted by.\n\t * @param {string=} opt_direction The direction the sort operation should\n\t * use. If none is given, 'asc' is used by default.\n\t * @chainnable\n\t */\n\torderBy(field, opt_direction) {\n\t\tthis.getOrCreateQuery_().sort(field, opt_direction);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an object (or multiple objects) and saves it to WeDeploy data. If\n\t * there's a validation registered in the collection and the request is\n\t * successful, the resulting object (or array of objects) is returned. The\n\t * data parameter can be either an Object or an Array of Objects.\n\t * These Objects describe the attributes on the objects that are to be created.\n\t * ```javascript\n\t * var data = WeDeploy.data('http://demodata.wedeploy.io');\n\t *\n\t * data.create('movies', {'title'=> 'Star Wars: Episode I – The Phantom Menace'})\n\t * \t\t .then(function(movie){\n\t * \t\t\t console.log(movie)\n\t *     });\n\t *\n\t * data.create('movies', [{'title'=> 'Star Wars: Episode II – Attack of the Clones'},\n\t * \t\t\t\t\t\t\t\t\t\t\t\t{'title'=> 'Star Wars: Episode III – Revenge of the Sith'})\n\t * \t\t .then(function(movies){\n\t * \t\t\t console.log(movies)\n\t *     });\n\t * ```\n\t * @param {string} collection Collection (key) used to create the new data.\n\t * @param {Object} data Attributes on the object that is to be created.\n\t * @return {!CancellablePromise}\n\t */\n\tcreate(collection, data) {\n\t\tassertDefAndNotNull(collection, 'Collection key must be specified.');\n\t\tassertObject(data, 'Data can\\'t be empty.');\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(collection)\n\t\t\t.post(data)\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => response.body());\n\t}\n\n\t/**\n\t * Update the attributes of a document form the passed-in object and saves\n\t * the record. If the object is invalid, the saving will fail and an error\n\t * object will be returned.\n\t *\n\t * ```javascript\n\t * var data = WeDeploy.data('http://demodata.wedeploy.io');\n\t *\n\t * data.update('movies/1019112353', {'title'=> 'Star Wars: Episode I'})\n\t * \t\t .then(function(movie){\n\t * \t\t\t console.log(movie)\n\t *     });\n\t * ```\n\t * @param {string} document Key used to update the document.\n\t * @param {Object} data Attributes on the object that is to be updated.\n\t * @return {!CancellablePromise}\n\t */\n\tupdate(document, data) {\n\t\tassertDefAndNotNull(document, 'Document key must be specified.');\n\t\tassertObject(data, 'Data must be specified.');\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(document)\n\t\t\t.put(data)\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => response.body());\n\t}\n\n\t/**\n\t * Deletes a [document/field/collection].\n\t * @param {string} key Key used to delete the\n\t * document/field/collection.\n\t * @return {!CancellablePromise}\n\t */\n\tdelete(key) {\n\t\tassertDefAndNotNull(key, 'Document/Field/Collection key must be specified');\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(key)\n\t\t\t.delete()\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(() => undefined);\n\t}\n\n\t/**\n\t * Retrieve data from a [document/field/collection].\n\t * @param {string} key Key used to delete the document/field/collection.\n\t * @return {!CancellablePromise}\n\t */\n\tget(key) {\n\t\tassertDefAndNotNull(key, 'Document/Field/Collection key must be specified');\n\n\t\tthis.addFiltersToQuery_();\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(key)\n\t\t\t.get(this.query_)\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => response.body());\n\t}\n\n\t/**\n\t * Retrieve data from a [document/field/collection] and put it in a search\n\t * format.\n\t * @param {string} key Key used to delete the document/field/collection.\n\t * @return {!CancellablePromise}\n\t */\n\tsearch(key) {\n\t\tassertDefAndNotNull(key, 'Document/Field/Collection key must be specified');\n\n\t\tthis.onSearch_();\n\n\t\tthis.addFiltersToQuery_();\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(key)\n\t\t\t.get(this.query_)\n\t\t\t.then(response => assertResponseSucceeded(response))\n\t\t\t.then(response => response.body());\n\t}\n\n\t/**\n\t * Creates new socket.io instance. Monitor the arrival of new broadcasted\n\t * data.\n\t * @param  {string} collection key/collection used to find organized data.\n\t * @param  {Object=} opt_options Object with Socket IO options.\n\t * @return {!io} Socket IO reference. Server events can be listened on it.\n\t */\n\twatch(collection, opt_options) {\n\t\tassertDefAndNotNull(collection, 'Collection key must be specified');\n\n\t\tthis.addFiltersToQuery_();\n\n\t\treturn this.wedeployClient\n\t\t\t.url(this.wedeployClient.dataUrl_)\n\t\t\t.auth(this.helperAuthScope)\n\t\t\t.path(collection)\n\t\t\t.watch(this.query_, opt_options);\n\t}\n\n\t/**\n\t * Gets the currentl used main {@link Filter} object. If none exists yet, a\n\t * new one is created.\n\t * @return {!Query}\n\t * @protected\n\t */\n\tgetOrCreateFilter_() {\n\t\tif (!this.filter_) {\n\t\t\tthis.filter_ = new Filter();\n\t\t}\n\t\treturn this.filter_;\n\t}\n\n\t/**\n\t * Gets the currently used {@link Query} object. If none exists yet,\n\t * a new one is created.\n\t * @return {!Query}\n\t * @protected\n\t */\n\tgetOrCreateQuery_() {\n\t\tif (!this.query_) {\n\t\t\tthis.query_ = new Query();\n\t\t}\n\t\treturn this.query_;\n\t}\n\n\t/**\n\t * Load the currently used main {@link Filter} object into the currently\n\t * used {@link Query}.\n\t * @chainable\n\t * @protected\n\t */\n\taddFiltersToQuery_() {\n\t\tif (core.isDef(this.filter_) && this.toSearch_ !== true) {\n\t\t\tthis.getOrCreateQuery_().filter(this.filter_);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a search to this request's {@link Query} instance.\n\t * @chainable\n\t * @protected\n\t */\n\tonSearch_() {\n\t\tif (core.isDef(this.filter_)) {\n\t\t\tthis.getOrCreateQuery_().search(this.getOrCreateFilter_());\n\t\t} else {\n\t\t\tthrow Error('It\\'s required to have a condition before using an \\'search()\\' for the first time.');\n\t\t}\n\t\tthis.toSearch_ = true;\n\t\treturn this;\n\t}\n\n}\n\nexport default DataApiHelper;\n","'use strict';\n\n/**\n * Abstraction layer for string to base64 conversion\n * reference: https://github.com/nodejs/node/issues/3462\n */\nclass Base64 {\n\t/**\n\t * Creates a base-64 encoded ASCII string from a \"string\" of binary data.\n\t * @param {string} string to be encoded.\n\t * @return {string}\n\t * @static\n\t */\n\tstatic encodeString(string) {\n\t\tif (typeof btoa === 'function') {\n\t\t\treturn btoa(string);\n\t\t}\n\n\t\treturn new Buffer(string.toString(), 'binary');\n\t}\n}\n\nexport default Base64;\n","/*!\n * Promises polyfill from Google's Closure Library.\n *\n *      Copyright 2013 The Closure Library Authors. All Rights Reserved.\n *\n * NOTE(eduardo): Promise support is not ready on all supported browsers,\n * therefore metal-promise is temporarily using Google's promises as polyfill.\n * It supports cancellable promises and has clean and fast implementation.\n */\n\n'use strict';\n\nimport { isDef, isFunction, isObject } from 'metal';\nimport { async } from 'metal';\n\n/**\n * Provides a more strict interface for Thenables in terms of\n * http://promisesaplus.com for interop with {@see CancellablePromise}.\n *\n * @interface\n * @extends {IThenable.<TYPE>}\n * @template TYPE\n */\nvar Thenable = function() {};\n\n/**\n * Adds callbacks that will operate on the result of the Thenable, returning a\n * new child Promise.\n *\n * If the Thenable is fulfilled, the {@code onFulfilled} callback will be\n * invoked with the fulfillment value as argument, and the child Promise will\n * be fulfilled with the return value of the callback. If the callback throws\n * an exception, the child Promise will be rejected with the thrown value\n * instead.\n *\n * If the Thenable is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value of the callback or thrown value.\n *\n * @param {?(function(this:THIS, TYPE):\n *             (RESULT|IThenable.<RESULT>|Thenable))=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fullfilled.\n * @param {?(function(*): *)=} opt_onRejected A function that will be invoked\n *     with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @return {!CancellablePromise.<RESULT>} A new Promise that will receive the\n *     result of the fulfillment or rejection callback.\n * @template RESULT,THIS\n */\nThenable.prototype.then = function() {};\n\n\n/**\n * An expando property to indicate that an object implements\n * {@code Thenable}.\n *\n * {@see addImplementation}.\n *\n * @const\n */\nThenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';\n\n\n/**\n * Marks a given class (constructor) as an implementation of Thenable, so\n * that we can query that fact at runtime. The class must have already\n * implemented the interface.\n * Exports a 'then' method on the constructor prototype, so that the objects\n * also implement the extern {@see Thenable} interface for interop with\n * other Promise implementations.\n * @param {function(new:Thenable,...[?])} ctor The class constructor. The\n *     corresponding class must have already implemented the interface.\n */\nThenable.addImplementation = function(ctor) {\n  ctor.prototype.then = ctor.prototype.then;\n  ctor.prototype.$goog_Thenable = true;\n};\n\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements {@code Thenable}.\n *     The class/superclass of the instance must call {@code addImplementation}.\n */\nThenable.isImplementedBy = function(object) {\n  if (!object) {\n    return false;\n  }\n  try {\n    return !!object.$goog_Thenable;\n  } catch (e) {\n    // Property access seems to be forbidden.\n    return false;\n  }\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\nvar partial = function(fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n/**\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled or rejected with a value, which will be known\n * as the fulfillment value or the rejection reason. Whether fulfilled or\n * rejected, the Promise result is immutable once it is set.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling {@code then} and registering\n * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise\n * resolves, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional {@code then} calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering {@code then} invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is resolved, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification's conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \"Thenables\".\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable.<TYPE>|Thenable)),\n *             function(*)): void} resolver\n *     Initialization function that is invoked immediately with {@code resolve}\n *     and {@code reject} functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {Thenable.<TYPE>}\n * @template TYPE,RESOLVER_CONTEXT\n */\nvar CancellablePromise = function(resolver, opt_context) {\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {CancellablePromise.State_}\n   */\n  this.state_ = CancellablePromise.State_.PENDING;\n\n  /**\n   * The resolved result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ = undefined;\n\n  /**\n   * For Promises created by calling {@code then()}, the originating parent.\n   * @private {CancellablePromise}\n   */\n  this.parent_ = null;\n\n  /**\n   * The list of {@code onFulfilled} and {@code onRejected} callbacks added to\n   * this Promise by calls to {@code then()}.\n   * @private {Array.<CancellablePromise.CallbackEntry_>}\n   */\n  this.callbackEntries_ = null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ = false;\n\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    /**\n     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an {@code onRejected} callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ = 0;\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    /**\n     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * {@code onRejected} callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ = false;\n  }\n\n  try {\n    var self = this;\n    resolver.call(\n      opt_context, function(value) {\n        self.resolve_(CancellablePromise.State_.FULFILLED, value);\n      }, function(reason) {\n        self.resolve_(CancellablePromise.State_.REJECTED, reason);\n      });\n  } catch (e) {\n    this.resolve_(CancellablePromise.State_.REJECTED, e);\n  }\n};\n\n/**\n * The delay in milliseconds before a rejected Promise's reason is passed to\n * the rejection handler. By default, the rejection handler rethrows the\n * rejection reason so that it appears in the developer console or\n * {@code window.onerror} handler.\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n * @type {number}\n */\nCancellablePromise.UNHANDLED_REJECTION_DELAY = 0;\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\nCancellablePromise.State_ = {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n/**\n * Typedef for entries in the callback chain. Each call to {@code then},\n * {@code thenCatch}, or {@code thenAlways} creates an entry containing the\n * functions that may be invoked once the Promise is resolved.\n *\n * @typedef {{\n *   child: CancellablePromise,\n *   onFulfilled: function(*),\n *   onRejected: function(*)\n * }}\n * @private\n */\nCancellablePromise.CallbackEntry_ = null;\n\n\n/**\n * @param {(TYPE|Thenable.<TYPE>|Thenable)=} opt_value\n * @return {!CancellablePromise.<TYPE>} A new Promise that is immediately resolved\n *     with the given value.\n * @template TYPE\n */\nCancellablePromise.resolve = function(opt_value) {\n  return new CancellablePromise(function(resolve) {\n      resolve(opt_value);\n    });\n};\n\n\n/**\n * @param {*=} opt_reason\n * @return {!CancellablePromise} A new Promise that is immediately rejected with the\n *     given reason.\n */\nCancellablePromise.reject = function(opt_reason) {\n  return new CancellablePromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to complete.\n * @template TYPE\n */\nCancellablePromise.race = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      if (!promises.length) {\n        resolve(undefined);\n      }\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(resolve, reject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<!Array.<TYPE>>} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected by the first rejection result.\n * @template TYPE\n */\nCancellablePromise.all = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toFulfill = promises.length;\n      var values = [];\n\n      if (!toFulfill) {\n        resolve(values);\n        return;\n      }\n\n      var onFulfill = function(index, value) {\n        toFulfill--;\n        values[index] = value;\n        if (toFulfill === 0) {\n          resolve(values);\n        }\n      };\n\n      var onReject = function(reason) {\n        reject(reason);\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(partial(onFulfill, i), onReject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the value of\n *     the first input to be fulfilled, or is rejected with a list of every\n *     rejection reason if all inputs are rejected.\n * @template TYPE\n */\nCancellablePromise.firstFulfilled = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toReject = promises.length;\n      var reasons = [];\n\n      if (!toReject) {\n        resolve(undefined);\n        return;\n      }\n\n      var onFulfill = function(value) {\n        resolve(value);\n      };\n\n      var onReject = function(index, reason) {\n        toReject--;\n        reasons[index] = reason;\n        if (toReject === 0) {\n          reject(reasons);\n        }\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(onFulfill, partial(onReject, i));\n      }\n    });\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value (or thrown value) of the callback.\n *\n * @override\n */\nCancellablePromise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {\n  return this.addChildPromise_(\n    isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n    isFunction(opt_onRejected) ? opt_onRejected : null,\n    opt_context);\n};\nThenable.addImplementation(CancellablePromise);\n\n\n/**\n * Adds a callback that will be invoked whether the Promise is fulfilled or\n * rejected. The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with {@code thenAlways} will be\n * executed in the same order with other calls to {@code then},\n * {@code thenAlways}, or {@code thenCatch}.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with {@code thenAlways}. A Promise that has\n * a cleanup handler added with {@code thenAlways} will be canceled if all of\n * its children created by {@code then} (or {@code thenCatch}) are canceled.\n *\n * @param {function(this:THIS): void} onResolved A function that will be invoked\n *     when the Promise is resolved.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise.<TYPE>} This Promise, for chaining additional calls.\n * @template THIS\n */\nCancellablePromise.prototype.thenAlways = function(onResolved, opt_context) {\n  var callback = function() {\n    try {\n      // Ensure that no arguments are passed to onResolved.\n      onResolved.call(opt_context);\n    } catch (err) {\n      CancellablePromise.handleRejection_.call(null, err);\n    }\n  };\n\n  this.addCallbackEntry_({\n    child: null,\n    onRejected: callback,\n    onFulfilled: callback\n  });\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to {@code then(null, onRejected)}.\n *\n * @param {!function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise} A new Promise that will receive the result of the\n *     callback.\n * @template THIS\n */\nCancellablePromise.prototype.thenCatch = function(onRejected, opt_context) {\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n/**\n * Alias of {@link CancellablePromise.prototype.thenCatch}\n */\nCancellablePromise.prototype.catch = CancellablePromise.prototype.thenCatch;\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string=} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\nCancellablePromise.prototype.cancel = function(opt_message) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    async.run(function() {\n      var err = new CancellablePromise.CancellationError(opt_message);\n      err.IS_CANCELLATION_ERROR = true;\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\nCancellablePromise.prototype.cancelInternal_ = function(err) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent's child list.\n      this.parent_.cancelChild_(this, err);\n    } else {\n      this.resolve_(CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!CancellablePromise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\nCancellablePromise.prototype.cancelChild_ = function(childPromise, err) {\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount = 0;\n  var childIndex = -1;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var i = 0, entry; (entry = this.callbackEntries_[i]); i++) {\n    var child = entry.child;\n    if (child) {\n      childCount++;\n      if (child === childPromise) {\n        childIndex = i;\n      }\n      if (childIndex >= 0 && childCount > 1) {\n        break;\n      }\n    }\n  }\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childIndex >= 0) {\n    if (this.state_ === CancellablePromise.State_.PENDING && childCount === 1) {\n      this.cancelInternal_(err);\n    } else {\n      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];\n      this.executeCallback_(\n        callbackEntry, CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been resolved.\n *\n * @param {CancellablePromise.CallbackEntry_} callbackEntry Record containing\n *     {@code onFulfilled} and {@code onRejected} callbacks to execute after\n *     the Promise is resolved.\n * @private\n */\nCancellablePromise.prototype.addCallbackEntry_ = function(callbackEntry) {\n  if ((!this.callbackEntries_ || !this.callbackEntries_.length) &&\n    (this.state_ === CancellablePromise.State_.FULFILLED ||\n    this.state_ === CancellablePromise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  if (!this.callbackEntries_) {\n    this.callbackEntries_ = [];\n  }\n  this.callbackEntries_.push(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the {@code onFulfilled} or {@code onRejected} callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|CancellablePromise.<RESULT>|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fullfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS=} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!CancellablePromise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\nCancellablePromise.prototype.addChildPromise_ = function(\nonFulfilled, onRejected, opt_context) {\n\n  var callbackEntry = {\n    child: null,\n    onFulfilled: null,\n    onRejected: null\n  };\n\n  callbackEntry.child = new CancellablePromise(function(resolve, reject) {\n    // Invoke onFulfilled, or resolve with the parent's value if absent.\n    callbackEntry.onFulfilled = onFulfilled ? function(value) {\n      try {\n        var result = onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent's reason if absent.\n    callbackEntry.onRejected = onRejected ? function(reason) {\n      try {\n        var result = onRejected.call(opt_context, reason);\n        if (!isDef(result) && reason.IS_CANCELLATION_ERROR) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ = this;\n  this.addCallbackEntry_(\n    /** @type {CancellablePromise.CallbackEntry_} */ (callbackEntry));\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\nCancellablePromise.prototype.unblockAndFulfill_ = function(value) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\nCancellablePromise.prototype.unblockAndReject_ = function(reason) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be resolved with the same state and result as the Thenable once it is itself\n * resolved.\n *\n * If the given result is not a Thenable, the Promise will be fulfilled or\n * rejected with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {CancellablePromise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\nCancellablePromise.prototype.resolve_ = function(state, x) {\n  if (this.state_ !== CancellablePromise.State_.PENDING) {\n    return;\n  }\n\n  if (this === x) {\n    state = CancellablePromise.State_.REJECTED;\n    x = new TypeError('CancellablePromise cannot resolve to itself');\n\n  } else if (Thenable.isImplementedBy(x)) {\n    x = /** @type {!Thenable} */ (x);\n    this.state_ = CancellablePromise.State_.BLOCKED;\n    x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);\n    return;\n\n  } else if (isObject(x)) {\n    try {\n      var then = x.then;\n      if (isFunction(then)) {\n        this.tryThen_(x, then);\n        return;\n      }\n    } catch (e) {\n      state = CancellablePromise.State_.REJECTED;\n      x = e;\n    }\n  }\n\n  this.result_ = x;\n  this.state_ = state;\n  this.scheduleCallbacks_();\n\n  if (state === CancellablePromise.State_.REJECTED && !x.IS_CANCELLATION_ERROR) {\n    CancellablePromise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Attempts to call the {@code then} method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the {@code then} method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a {@code then} method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The {@code then} method of the Thenable object.\n * @private\n */\nCancellablePromise.prototype.tryThen_ = function(thenable, then) {\n  this.state_ = CancellablePromise.State_.BLOCKED;\n  var promise = this;\n  var called = false;\n\n  var resolve = function(value) {\n    if (!called) {\n      called = true;\n      promise.unblockAndFulfill_(value);\n    }\n  };\n\n  var reject = function(reason) {\n    if (!called) {\n      called = true;\n      promise.unblockAndReject_(reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a resolved Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If {@code startExecution_} is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\nCancellablePromise.prototype.scheduleCallbacks_ = function() {\n  if (!this.executing_) {\n    this.executing_ = true;\n    async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\nCancellablePromise.prototype.executeCallbacks_ = function() {\n  while (this.callbackEntries_ && this.callbackEntries_.length) {\n    var entries = this.callbackEntries_;\n    this.callbackEntries_ = [];\n\n    for (var i = 0; i < entries.length; i++) {\n      this.executeCallback_(entries[i], this.state_, this.result_);\n    }\n  }\n  this.executing_ = false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}\n * or {@code onRejected} callback based on the resolved state of the Promise.\n *\n * @param {!CancellablePromise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {CancellablePromise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The resolved result of the Promise.\n * @private\n */\nCancellablePromise.prototype.executeCallback_ = function(\ncallbackEntry, state, result) {\n  if (state === CancellablePromise.State_.FULFILLED) {\n    callbackEntry.onFulfilled(result);\n  } else {\n    this.removeUnhandledRejection_();\n    callbackEntry.onRejected(result);\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\nCancellablePromise.prototype.removeUnhandledRejection_ = function() {\n  var p;\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    for (p = this; p && p.unhandledRejectionId_; p = p.parent_) {\n      clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ = 0;\n    }\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    for (p = this; p && p.hadUnhandledRejection_; p = p.parent_) {\n      p.hadUnhandledRejection_ = false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no {@code onRejected} callback\n * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!CancellablePromise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\nCancellablePromise.addUnhandledRejection_ = function(promise, reason) {\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    promise.unhandledRejectionId_ = setTimeout(function() {\n      CancellablePromise.handleRejection_.call(null, reason);\n    }, CancellablePromise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    promise.hadUnhandledRejection_ = true;\n    async.run(function() {\n      if (promise.hadUnhandledRejection_) {\n        CancellablePromise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no {@code onRejected} callbacks registered yet.\n * @type {function(*)}\n * @private\n */\nCancellablePromise.handleRejection_ = async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * {@code onRejected} callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a {@code window.onerror} handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to {@code async.throwException}.\n */\nCancellablePromise.setUnhandledRejectionHandler = function(handler) {\n  CancellablePromise.handleRejection_ = handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.\n *\n * @param {string=} opt_message\n * @constructor\n * @extends {Error}\n * @final\n */\nCancellablePromise.CancellationError = class extends Error {\n  constructor(opt_message) {\n     super(opt_message);\n\n     if (opt_message) {\n       this.message = opt_message;\n     }\n   }\n};\n\n/** @override */\nCancellablePromise.CancellationError.prototype.name = 'cancel';\n\nexport {CancellablePromise};\nexport default CancellablePromise;\n","'use strict';\n\nimport { isDef, isDefAndNotNull } from 'metal';\nimport Uri from 'metal-uri';\nimport { CancellablePromise as Promise } from 'metal-promise';\n\nclass Ajax {\n\n\t/**\n\t * XmlHttpRequest's getAllResponseHeaders() method returns a string of\n\t * response headers according to the format described on the spec:\n\t * {@link http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method}.\n\t * This method parses that string into a user-friendly name/value pair\n\t * object.\n\t * @param {string} allHeaders All headers as string.\n\t * @return {!Array.<Object<string, string>>}\n\t */\n\tstatic parseResponseHeaders(allHeaders) {\n\t\tvar headers = [];\n\t\tif (!allHeaders) {\n\t\t\treturn headers;\n\t\t}\n\t\tvar pairs = allHeaders.split('\\u000d\\u000a');\n\t\tfor (var i = 0; i < pairs.length; i++) {\n\t\t\tvar index = pairs[i].indexOf('\\u003a\\u0020');\n\t\t\tif (index > 0) {\n\t\t\t\tvar name = pairs[i].substring(0, index);\n\t\t\t\tvar value = pairs[i].substring(index + 2);\n\t\t\t\theaders.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\n\t/**\n\t * Requests the url using XMLHttpRequest.\n\t * @param {!string} url\n\t * @param {!string} method\n\t * @param {?string} body\n\t * @param {MultiMap=} opt_headers\n\t * @param {MultiMap=} opt_params\n\t * @param {number=} opt_timeout\n\t * @param {boolean=} opt_sync\n\t * @param {boolean=} opt_withCredentials\n\t * @return {Promise} Deferred ajax request.\n\t * @protected\n\t */\n\tstatic request(url, method, body, opt_headers, opt_params, opt_timeout, opt_sync, opt_withCredentials) {\n\t\turl = url || '';\n\t\tmethod = method || 'GET';\n\n\t\tvar request = new XMLHttpRequest();\n\n\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\trequest.onload = function() {\n\t\t\t\tif (request.aborted) {\n\t\t\t\t\trequest.onerror();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(request);\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\tvar error = new Error('Request error');\n\t\t\t\terror.request = request;\n\t\t\t\treject(error);\n\t\t\t};\n\t\t}).thenCatch(function(reason) {\n\t\t\trequest.abort();\n\t\t\tthrow reason;\n\t\t}).thenAlways(function() {\n\t\t\tclearTimeout(timeout);\n\t\t});\n\n\t\tif (opt_params) {\n\t\t\turl = new Uri(url).addParametersFromMultiMap(opt_params).toString();\n\t\t}\n\n\t\trequest.open(method, url, !opt_sync);\n\n\t\tif (opt_withCredentials) {\n\t\t\trequest.withCredentials = true;\n\t\t}\n\n\t\tif (opt_headers) {\n\t\t\topt_headers.names().forEach(function(name) {\n\t\t\t\trequest.setRequestHeader(name, opt_headers.getAll(name).join(', '));\n\t\t\t});\n\t\t}\n\n\t\trequest.send(isDef(body) ? body : null);\n\n\t\tif (isDefAndNotNull(opt_timeout)) {\n\t\t\tvar timeout = setTimeout(function() {\n\t\t\t\tpromise.cancel('Request timeout');\n\t\t\t}, opt_timeout);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n}\n\nexport default Ajax;\n","'use strict';\n\n/**\n * Provides a convenient interface for data transport.\n * @interface\n */\nclass Transport {\n\n\t/**\n\t * Sends a message for the specified client.\n\t * @param {!ClientRequest} clientRequest\n\t * @return {!Promise} Deferred request.\n\t */\n\tsend() {}\n\n}\n\nexport default Transport;\n","'use strict';\n\nimport { core } from 'metal';\nimport { MultiMap } from 'metal-structs';\n\n/**\n * Represents a client message (e.g. a request or a response).\n */\nclass ClientMessage {\n\tconstructor() {\n\t\tthis.headers_ = new MultiMap();\n\t}\n\n\t/**\n\t * Fluent getter and setter for request body.\n\t * @param {*=} opt_body Request body to be set. If none is given,\n\t *   the current value of the body will be returned.\n\t * @return {*} Returns request body if no body value was given. Otherwise\n\t *   returns the {@link ClientMessage} object itself, so calls can be chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\tbody(opt_body) {\n\t\tif (core.isDef(opt_body)) {\n\t\t\tthis.body_ = opt_body;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.body_;\n\t}\n\n\t/**\n\t * Adds a header. If a header with the same name already exists, it will not be\n\t * overwritten, but the new value will be stored as well. The order is preserved.\n\t * @param {string} name\n\t * @param {string} value\n\t * @chainable\n\t */\n\theader(name, value) {\n\t\tif (arguments.length !== 2) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\t\tthis.headers_.set(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fluent getter and setter for request headers.\n\t * @param {MultiMap|Object=} opt_headers Request headers list to\n\t *   be set. If none is given the current value of the headers will\n\t *   be returned.\n\t * @return {!MultiMap|ClientMessage} Returns map of request headers\n\t *   if no new value was given. Otherwise returns the {@link ClientMessage}\n\t *   object itself, so calls can be chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\theaders(opt_headers) {\n\t\tif (core.isDef(opt_headers)) {\n\t\t\tif (opt_headers instanceof MultiMap) {\n\t\t\t\tthis.headers_ = opt_headers;\n\t\t\t} else {\n\t\t\t\tthis.headers_.values = opt_headers;\n\t\t\t}\n\t\t\treturn opt_headers;\n\t\t}\n\t\treturn this.headers_;\n\t}\n\n\t/**\n\t * Removes the body.\n\t */\n\tremoveBody() {\n\t\tthis.body_ = undefined;\n\t}\n}\n\nexport default ClientMessage;\n","'use strict';\n\nimport { core } from 'metal';\nimport ClientMessage from './ClientMessage';\n\n/**\n * Represents a client response object.\n * @extends {ClientMessage}\n */\nclass ClientResponse extends ClientMessage {\n\tconstructor(clientRequest) {\n\t\tsuper();\n\t\tif (!clientRequest) {\n\t\t\tthrow new Error('Can\\'t create response without request');\n\t\t}\n\t\tthis.clientRequest_ = clientRequest;\n\t}\n\n\t/**\n\t * Returns request that created this response.\n\t * @return {!ClientRequest}\n\t */\n\trequest() {\n\t\treturn this.clientRequest_;\n\t}\n\n\t/**\n\t * Fluent getter and setter for response status code.\n\t * @param {number=} opt_statusCode Request status code to be set. If none is given,\n\t *   the current status code value will be returned.\n\t * @return {!ClientMessage|number} Returns response status code if no new value was\n\t *   given. Otherwise returns the {@link ClientMessage} object itself, so calls can\n\t *   be chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\tstatusCode(opt_statusCode) {\n\t\tif (core.isDef(opt_statusCode)) {\n\t\t\tthis.statusCode_ = opt_statusCode;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.statusCode_;\n\t}\n\n\t/**\n\t * Fluent getter and setter for response status text.\n\t * @param {string=} opt_statusText Request status text to be set. If none is given,\n\t *   the current status text value will be returned.\n\t * @return {!ClientMessage|number} Returns response status text if no new value was\n\t *   given. Otherwise returns the {@link ClientMessage} object itself, so calls can\n\t *   be chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\tstatusText(opt_statusText) {\n\t\tif (core.isDef(opt_statusText)) {\n\t\t\tthis.statusText_ = opt_statusText;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.statusText_;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered valid.\n\t * @return {boolean}\n\t */\n\tsucceeded() {\n\t\treturn this.statusCode() >= 200 && this.statusCode() <= 399;\n\t}\n\n}\n\nexport default ClientResponse;\n","'use strict';\n\nimport Ajax from 'metal-ajax';\nimport Transport from '../Transport';\nimport ClientResponse from '../ClientResponse';\n\n/**\n * The implementation of an ajax transport to be used with {@link WeDeploy}.\n * @extends {Transport}\n */\nclass AjaxTransport extends Transport {\n\t/**\n\t * @inheritDoc\n\t */\n\tsend(clientRequest) {\n\t\tvar deferred = Ajax.request(\n\t\t\tclientRequest.url(), clientRequest.method(), clientRequest.body(),\n\t\t\tclientRequest.headers(), clientRequest.params(), null, false, clientRequest.withCredentials());\n\n\t\treturn deferred.then(function(response) {\n\t\t\tvar clientResponse = new ClientResponse(clientRequest);\n\t\t\tclientResponse.body(response.responseText);\n\t\t\tclientResponse.statusCode(response.status);\n\t\t\tclientResponse.statusText(response.statusText);\n\t\t\tAjax.parseResponseHeaders(response.getAllResponseHeaders()).forEach(function(header) {\n\t\t\t\tclientResponse.header(header.name, header.value);\n\t\t\t});\n\t\t\treturn clientResponse;\n\t\t});\n\t}\n}\n\nexport default AjaxTransport;\n","'use strict';\n\nimport AjaxTransport from './browser/AjaxTransport';\n\n/**\n * Provides a factory for data transport.\n */\nclass TransportFactory {\n\tconstructor() {\n\t\tthis.transports = {};\n\t\tthis.transports[TransportFactory.DEFAULT_TRANSPORT_NAME] = TransportFactory[TransportFactory.DEFAULT_TRANSPORT_NAME];\n\t}\n\n\t/**\n\t * Returns {@link TransportFactory} instance.\n\t */\n\tstatic instance() {\n\t\tif (!TransportFactory.instance_) {\n\t\t\tTransportFactory.instance_ = new TransportFactory();\n\t\t}\n\t\treturn TransportFactory.instance_;\n\t}\n\n\t/**\n\t * Gets an instance of the transport implementation with the given name.\n\t * @param {string} implementationName\n\t * @return {!Transport}\n\t */\n\tget(implementationName) {\n\t\tvar TransportClass = this.transports[implementationName];\n\n\t\tif (!TransportClass) {\n\t\t\tthrow new Error('Invalid transport name: ' + implementationName);\n\t\t}\n\n\t\ttry {\n\t\t\treturn new (TransportClass)();\n\t\t} catch (err) {\n\t\t\tthrow new Error('Can\\'t create transport', err);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the default transport implementation.\n\t * @return {!Transport}\n\t */\n\tgetDefault() {\n\t\treturn this.get(TransportFactory.DEFAULT_TRANSPORT_NAME);\n\t}\n}\n\nTransportFactory.DEFAULT_TRANSPORT_NAME = 'default';\n\nTransportFactory[TransportFactory.DEFAULT_TRANSPORT_NAME] = AjaxTransport;\n\nexport default TransportFactory;\n","'use strict';\n\nimport { core } from 'metal';\nimport ClientMessage from './ClientMessage';\nimport { MultiMap } from 'metal-structs';\n\n/**\n * Represents a client request object.\n * @extends {ClientMessage}\n */\nclass ClientRequest extends ClientMessage {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.params_ = new MultiMap();\n\t\tthis.withCredentials_ = true;\n\t}\n\n\t/**\n\t * Fluent getter and setter for with credentials option.\n\t * @param {boolean=} opt_withCredentials\n\t * @chainable Chainable when used as setter.\n\t */\n\twithCredentials(opt_withCredentials) {\n\t\tif (core.isDef(opt_withCredentials)) {\n\t\t\tthis.withCredentials_ = !!opt_withCredentials;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.withCredentials_;\n\t}\n\n\t/**\n\t * Fluent getter and setter for request method.\n\t * @param {string=} opt_method Request method to be set. If none is given,\n\t *   the current method value will be returned.\n\t * @return {!ClientMessage|string} Returns request method if no new value was\n\t *   given. Otherwise returns the {@link ClientMessage} object itself, so\n\t *   calls can be chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\tmethod(opt_method) {\n\t\tif (core.isDef(opt_method)) {\n\t\t\tthis.method_ = opt_method;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.method_ || ClientRequest.DEFAULT_METHOD;\n\t}\n\n\t/**\n\t * Adds a query. If a query with the same name already exists, it will not\n\t * be overwritten, but new value will be stored as well. The order is preserved.\n\t * @param {string} name\n\t * @param {string} value\n\t * @chainable\n\t */\n\tparam(name, value) {\n\t\tif (arguments.length !== 2) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\t\tthis.params_.set(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fluent getter and setter for request querystring.\n\t * @param {MultiMap|Object=} opt_params Request querystring map to be set.\n\t *   If none is given the current value of the params will be returned.\n\t * @return {!MultiMap|ClientMessage} Returns map of request querystring if\n\t *   no new value was given. Otherwise returns the {@link ClientMessage}\n\t *   object itself, so calls can be chained.\n\t */\n\tparams(opt_params) {\n\t\tif (core.isDef(opt_params)) {\n\t\t\tif (opt_params instanceof MultiMap) {\n\t\t\t\tthis.params_ = opt_params;\n\t\t\t} else {\n\t\t\t\tthis.params_.values = opt_params;\n\t\t\t}\n\t\t\treturn opt_params;\n\t\t}\n\t\treturn this.params_;\n\t}\n\n\t/**\n\t * Fluent getter and setter for request url.\n\t * @param {string=} opt_url Request url to be set. If none is given,\n\t *   the current value of the url will be returned.\n\t * @return {!ClientMessage|string} Returns request url if no new value was given.\n\t *   Otherwise returns the {@link ClientMessage} object itself, so calls can be\n\t *   chained.\n\t * @chainable Chainable when used as setter.\n\t */\n\turl(opt_url) {\n\t\tif (core.isDef(opt_url)) {\n\t\t\tthis.url_ = opt_url;\n\t\t\treturn this;\n\t\t}\n\t\treturn this.url_;\n\t}\n\n}\n\nClientRequest.DEFAULT_METHOD = 'GET';\n\nexport default ClientRequest;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport { core } from 'metal';\nimport Auth from './auth/Auth';\nimport AuthApiHelper from './auth/AuthApiHelper';\nimport DataApiHelper from './data/DataApiHelper';\nimport Base64 from '../crypt/Base64';\nimport Embodied from '../api-query/Embodied';\nimport Query from '../api-query/Query';\nimport Filter from '../api-query/Filter';\nimport TransportFactory from './TransportFactory';\nimport ClientRequest from './ClientRequest';\nimport { MultiMap } from 'metal-structs';\nimport Uri from 'metal-uri';\nimport { assertUriWithNoPath } from './assertions';\n\n\nvar io;\n\n// Optimistic initialization of `io` reference from global `globals.window.io`.\nif (typeof globals.window !== 'undefined') {\n\tio = globals.window.io;\n}\n\n/**\n * The main class for making api requests. Sending requests returns a promise\n * that is resolved when the response arrives. Usage example:\n * ```javascript\n * WeDeploy\n *   .url('/data/tasks')\n *   .post({desc: 'Buy milkl'})\n *   .then(function(response) {\n *     // Handle response here.\n *     console.log(response.body())\n *   });\n * ```\n */\nclass WeDeploy {\n\t/**\n\t * WeDeploy constructor function.\n\t * @param {string} url The base url.\n\t * @param {...string} paths Any amount of paths to be appended to the base\n\t * url.\n\t * @constructor\n\t */\n\tconstructor(url, ...paths) {\n\t\tif (arguments.length === 0) {\n\t\t\tthrow new Error('Invalid arguments, try `new WeDeploy(baseUrl, url)`');\n\t\t}\n\n\t\tthis.auth_ = null;\n\t\tthis.body_ = null;\n\t\tthis.url_ = Uri.joinPaths(url || '', ...paths);\n\t\tthis.headers_ = new MultiMap();\n\t\tthis.params_ = new MultiMap();\n\t\tthis.withCredentials_ = true;\n\n\t\tthis.header('Content-Type', 'application/json');\n\t\tthis.header('X-Requested-With', 'XMLHttpRequest');\n\t}\n\n\t/**\n\t * Static factory for creating WeDeploy data for the given url.\n\t * @param {string=} opt_dataUrl The url that points to the data services.\n\t * @return @return {data} WeDeploy data instance.\n\t */\n\tstatic data(opt_dataUrl) {\n\t\tassertUriWithNoPath(opt_dataUrl, 'The data url should not have a path');\n\n\t\tif (core.isString(opt_dataUrl)) {\n\t\t\tWeDeploy.dataUrl_ = opt_dataUrl;\n\t\t}\n\t\tif (!WeDeploy.data_) {\n\t\t\tWeDeploy.data_ = new DataApiHelper(WeDeploy);\n\t\t\tWeDeploy.data_.auth(WeDeploy.auth().currentUser);\n\t\t}\n\t\treturn WeDeploy.data_;\n\t}\n\n\t/**\n\t * Adds authorization information to this request.\n\t * @param {!Auth|string} authOrTokenOrEmail Either an {@link Auth} instance,\n\t * an authorization token, or the email.\n\t * @param {string=} opt_password If a email is given as the first param,\n\t * this should be the password.\n\t * @chainable\n\t */\n\tauth(authOrTokenOrEmail, opt_password) {\n\t\tthis.auth_ = authOrTokenOrEmail;\n\t\tif (!(this.auth_ instanceof Auth)) {\n\t\t\tthis.auth_ = Auth.create(authOrTokenOrEmail, opt_password);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Static factory for creating WeDeploy auth for the given url.\n\t * @param {string=} opt_authUrl The url that points to the auth service.\n\t */\n\tstatic auth(opt_authUrl) {\n\t\tif (core.isString(opt_authUrl)) {\n\t\t\tWeDeploy.authUrl_ = opt_authUrl;\n\t\t}\n\t\tif (!WeDeploy.auth_) {\n\t\t\tWeDeploy.auth_ = new AuthApiHelper(WeDeploy);\n\t\t}\n\t\treturn WeDeploy.auth_;\n\t}\n\n\t/**\n\t * Sets the body that will be sent with this request.\n\t * @param {*} body\n\t * @chainable\n\t */\n\tbody(body) {\n\t\tthis.body_ = body;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the given body object to query params.\n\t * @param {!ClientRequest} clientRequest Client request.\n\t * @param {*} body\n\t * @protected\n\t */\n\tconvertBodyToParams_(clientRequest, body) {\n\t\tif (core.isString(body)) {\n\t\t\tbody = {\n\t\t\t\tbody: body\n\t\t\t};\n\t\t} else if (body instanceof Embodied) {\n\t\t\tbody = body.body();\n\t\t}\n\t\tObject.keys(body || {}).forEach(name => clientRequest.param(name, body[name]));\n\t}\n\n\t/**\n\t * Creates client request and encode.\n\t * @param {string} method\n\t * @param {*} body\n\t * @return {!ClientRequest} Client request.\n\t * @protected\n\t */\n\tcreateClientRequest_(method, body) {\n\t\tconst clientRequest = new ClientRequest();\n\n\t\tclientRequest.body(body || this.body_);\n\n\t\tif (!core.isDefAndNotNull(clientRequest.body())) {\n\t\t\tif (this.formData_) {\n\t\t\t\tclientRequest.body(this.formData_);\n\t\t\t}\n\t\t}\n\n\t\tclientRequest.method(method);\n\t\tclientRequest.headers(this.headers());\n\t\tclientRequest.params(this.params());\n\t\tclientRequest.url(this.url());\n\t\tclientRequest.withCredentials(this.withCredentials_);\n\n\t\tthis.encode(clientRequest);\n\n\t\treturn clientRequest;\n\t}\n\n\t/**\n\t * Decodes clientResponse body, parsing the body for example.\n\t * @param {!ClientResponse} clientResponse The response object to be\n\t * decoded.\n\t * @return {!ClientResponse} The decoded response.\n\t */\n\tdecode(clientResponse) {\n\t\tif (WeDeploy.isContentTypeJson(clientResponse)) {\n\t\t\ttry {\n\t\t\t\tclientResponse.body(JSON.parse(clientResponse.body()));\n\t\t\t} catch (err) {}\n\t\t}\n\t\treturn clientResponse;\n\t}\n\n\t/**\n\t * Sends message with the DELETE http verb.\n\t * @param {string=} opt_body Content to be sent as the request's body.\n\t * @return {!CancellablePromise}\n\t */\n\tdelete(opt_body) {\n\t\treturn this.sendAsync('DELETE', opt_body);\n\t}\n\n\t/**\n\t * Encodes the given {@link ClientRequest}, converting its body to an\n\t * appropriate format for example.\n\t * @param {!ClientRequest} clientRequest The request object to encode.\n\t * @return {!ClientRequest} The encoded request.\n\t */\n\tencode(clientRequest) {\n\t\tlet body = clientRequest.body();\n\n\t\tif (core.isElement(body)) {\n\t\t\tbody = new FormData(body);\n\t\t\tclientRequest.body(body);\n\t\t}\n\n\t\tbody = this.maybeWrapWithQuery_(body);\n\t\tif (clientRequest.method() === 'GET') {\n\t\t\tthis.convertBodyToParams_(clientRequest, body);\n\t\t\tclientRequest.removeBody();\n\t\t\tbody = null;\n\t\t}\n\n\t\tif (typeof FormData !== 'undefined' && body instanceof FormData) {\n\t\t\tclientRequest.headers().remove('content-type');\n\t\t} else if (body instanceof Embodied) {\n\t\t\tclientRequest.body(body.toString());\n\t\t} else if (WeDeploy.isContentTypeJson(clientRequest)) {\n\t\t\tclientRequest.body(JSON.stringify(clientRequest.body()));\n\t\t}\n\n\t\tthis.encodeParams_(clientRequest);\n\t\tthis.resolveAuthentication_(clientRequest);\n\n\t\treturn clientRequest;\n\t}\n\n\t/**\n\t * Encodes the params for the given request, according to their types.\n\t * @param {!ClientRequest} clientRequest\n\t * @protected\n\t */\n\tencodeParams_(clientRequest) {\n\t\tlet params = clientRequest.params();\n\t\tparams.names().forEach(function(name) {\n\t\t\tlet values = params.getAll(name);\n\t\t\tvalues.forEach(function(value, index) {\n\t\t\t\tif (value instanceof Embodied) {\n\t\t\t\t\tvalue = value.toString();\n\t\t\t\t} else if (core.isObject(value) || (value instanceof Array)) {\n\t\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t\t}\n\t\t\t\tvalues[index] = value;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Adds a key/value pair to be sent via the body in a `multipart/form-data` format.\n\t * If the body is set by other means (for example, through the `body` method), this\n\t * will be ignored.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tform(name, value) {\n\t\tif (typeof FormData === 'undefined') {\n\t\t\tthrow new Error('form() is only available when FormData API is available.');\n\t\t}\n\n\t\tif (!this.formData_) {\n\t\t\tthis.formData_ = new FormData();\n\t\t}\n\t\tthis.formData_.append(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends message with the GET http verb.\n\t * @param {*=} opt_params Params to be added to the request url.\n\t * @return {!CancellablePromise}\n\t */\n\tget(opt_params) {\n\t\treturn this.sendAsync('GET', opt_params);\n\t}\n\n\t/**\n\t * Adds a header. If the header with the same name already exists, it will\n\t * not be overwritten, but new value will be stored. The order is preserved.\n\t * @param {string} name Header key.\n\t * @param {*} value Header value.\n\t * @chainable\n\t */\n\theader(name, value) {\n\t\tif (arguments.length !== 2) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\t\tthis.headers_.set(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the headers.\n\t * @return {!MultiMap}\n\t */\n\theaders() {\n\t\treturn this.headers_;\n\t}\n\n\t/**\n\t * Check if clientMessage content type is application/json.\n\t * @param {ClientMessage} clientMessage Client message.\n\t * @return {boolean}\n\t */\n\tstatic isContentTypeJson(clientMessage) {\n\t\tconst contentType = clientMessage.headers().get('content-type') || '';\n\t\treturn contentType.indexOf('application/json') === 0;\n\t}\n\n\t/**\n\t * Wraps the given `Embodied` instance with a {@link Query} instance if needed.\n\t * @param {Embodied} embodied\n\t * @return {Embodied}\n\t * @protected\n\t */\n\tmaybeWrapWithQuery_(embodied) {\n\t\tif (embodied instanceof Filter) {\n\t\t\tembodied = Query.filter(embodied);\n\t\t}\n\t\treturn embodied;\n\t}\n\n\t/**\n\t * Adds a query. If the query with the same name already exists, it will not\n\t * be overwritten, but new value will be stored. The order is preserved.\n\t * @param {string} name Param key.\n\t * @param {*} value Param value.\n\t * @chainable\n\t */\n\tparam(name, value) {\n\t\tif (arguments.length !== 2) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\t\tthis.params_.set(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the query strings map.\n\t * @return {!MultiMap}\n\t */\n\tparams() {\n\t\treturn this.params_;\n\t}\n\n\t/**\n\t * Sends message with the PATCH http verb.\n\t * @param {string=} opt_body Content to be sent as the request's body.\n\t * @return {!CancellablePromise}\n\t */\n\tpatch(opt_body) {\n\t\treturn this.sendAsync('PATCH', opt_body);\n\t}\n\n\t/**\n\t * Creates a new {@link WeDeploy} instance for handling the url resulting in the\n\t * union of the current url with the given paths.\n\t * @param {...string} paths Any number of paths.\n\t * @return {!WeDeploy} A new {@link WeDeploy} instance for handling the given paths.\n\t */\n\tpath(...paths) {\n\t\tlet wedeployClient = new WeDeploy(this.url(), ...paths);\n\n\t\tif (core.isDefAndNotNull(this.auth_)) {\n\t\t\twedeployClient.auth(this.auth_);\n\t\t}\n\n\t\treturn wedeployClient.use(this.customTransport_);\n\t}\n\n\t/**\n\t * Sends message with the POST http verb.\n\t * @param {string=} opt_body Content to be sent as the request's body.\n\t * @return {!CancellablePromise}\n\t */\n\tpost(opt_body) {\n\t\treturn this.sendAsync('POST', opt_body);\n\t}\n\n\t/**\n\t * Sends message with the PUT http verb.\n\t * @param {string=} opt_body Content to be sent as the request's body.\n\t * @return {!CancellablePromise}\n\t */\n\tput(opt_body) {\n\t\treturn this.sendAsync('PUT', opt_body);\n\t}\n\n\t/**\n\t * Adds the authentication information to the request.\n\t * @param {!ClientRequest} clientRequest\n\t * @protected\n\t */\n\tresolveAuthentication_(clientRequest) {\n\t\tif (!this.auth_) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.auth_.hasToken()) {\n\t\t\tclientRequest.header('Authorization', 'Bearer ' + this.auth_.token);\n\t\t} else {\n\t\t\tconst credentials = this.auth_.email + ':' + this.auth_.password;\n\t\t\tclientRequest.header('Authorization', 'Basic ' + Base64.encodeString(credentials));\n\t\t}\n\t}\n\n\t/**\n\t * Uses transport to send request with given method name and body\n\t * asynchronously.\n\t * @param {string} method The HTTP method to be used when sending data.\n\t * @param {string} body Content to be sent as the request's body.\n\t * @return {!CancellablePromise} Deferred request.\n\t */\n\tsendAsync(method, body) {\n\t\tconst transport = this.customTransport_ || TransportFactory.instance().getDefault();\n\n\t\tconst clientRequest = this.createClientRequest_(method, body);\n\n\t\treturn transport.send(clientRequest).then(this.decode);\n\t}\n\n\t/**\n\t * Sets the socket transport\n\t * @param {Object} socket implementation object.\n\t */\n\tstatic socket(socket) {\n\t\tio = socket;\n\t}\n\n\t/**\n\t * Static factory for creating WeDeploy client for the given url.\n\t * @param {string} url The url that the client should use for sending requests.\n\t */\n\tstatic url(url) {\n\t\treturn new WeDeploy(url).use(this.customTransport_);\n\t}\n\n\t/**\n\t * Returns the URL used by this client.\n\t */\n\turl() {\n\t\treturn this.url_;\n\t}\n\n\t/**\n\t * Specifies {@link Transport} implementation.\n\t * @param {!Transport} transport The transport implementation that should be\n\t * used.\n\t */\n\tuse(transport) {\n\t\tthis.customTransport_ = transport;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates new socket.io instance. The parameters passed to socket.io\n\t * constructor will be provided:\n\t *\n\t * ```javascript\n\t * WeDeploy.url('http://domain:8080/path/a').watch({id: 'myId'}, {foo: true});\n\t * // Equals:\n\t * io('domain:8080/?url=path%2Fa%3Fid%3DmyId', {foo: true});\n\t * ```\n\t *\n\t * @param {Object=} opt_params Params to be sent with the Socket IO request.\n\t * @param {Object=} opt_options Object with Socket IO options.\n\t * @return {!io} Socket IO reference. Server events can be listened on it.\n\t */\n\twatch(opt_params, opt_options) {\n\t\tif (typeof io === 'undefined') {\n\t\t\tthrow new Error('Socket.io client not loaded');\n\t\t}\n\n\t\tconst clientRequest = this.createClientRequest_('GET', opt_params);\n\t\tconst uri = new Uri(clientRequest.url());\n\t\turi.addParametersFromMultiMap(clientRequest.params());\n\n\t\topt_options = opt_options || {\n\t\t\tforceNew: true\n\t\t};\n\t\topt_options.query = 'url=' + encodeURIComponent(uri.getPathname() + uri.getSearch());\n\t\topt_options.path = opt_options.path || uri.getPathname();\n\n\t\treturn io(uri.getHost(), opt_options);\n\t}\n\n\t/**\n\t * @param {boolean} opt_withCredentials\n\t */\n\twithCredentials(withCredentials) {\n\t\tthis.withCredentials_ = !!withCredentials;\n\t\treturn this;\n\t}\n}\n\nWeDeploy.auth_ = null;\nWeDeploy.authUrl_ = '';\nWeDeploy.dataUrl_ = '';\n\nexport default WeDeploy;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport Filter from '../api-query/Filter';\nimport Geo from '../api-query/Geo';\nimport WeDeploy from '../api/WeDeploy';\nimport Query from '../api-query/Query';\nimport Range from '../api-query/Range';\n\nglobals.window.Filter = Filter;\nglobals.window.Geo = Geo;\nglobals.window.Query = Query;\nglobals.window.Range = Range;\nglobals.window.WeDeploy = WeDeploy;\n\nexport { Filter, Geo, Query, Range, WeDeploy };\nexport default WeDeploy;\n"],"names":["globals","window","document","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","abstractMethod","Error","collectSuperClassesProperty","constructor","propertyName","propertyValues","__proto__","isPrototypeOf","Function","push","disableCompatibilityMode","undefined","enableCompatibilityMode","opt_data","getCompatibilityModeData","__METAL_COMPATIBILITY__","getFunctionName","fn","name","str","toString","substring","indexOf","getUid","opt_object","opt_noInheritance","id","hasOwnProperty","identityFunction","opt_returnValue","isBoolean","val","isDef","isDefAndNotNull","isNull","isDocument","nodeType","isElement","isFunction","isNumber","isWindow","isObject","type","isPromise","then","isString","String","mergeSuperClassesProperty","opt_mergeFn","mergedName","merged","nullFunction","array","arr1","arr2","length","i","arr","opt_output","output","Array","isArray","flatten","obj","rv","removeAt","prototype","splice","call","start","opt_end","sliced","end","async","throwException","exception","nextTick","run","callback","opt_context","workQueueScheduled_","processWorkQueue","workQueue_","WorkItem_","workItems","workItem","scope","e","cb","bind","wrapCallback_","setImmediate","setImmediate_","getSetImmediateEmulator_","Channel","MessageChannel","postMessage","addEventListener","iframe","createElement","style","display","src","documentElement","appendChild","win","contentWindow","doc","open","write","close","message","origin","location","protocol","host","onmessage","data","port1","port2","channel","head","tail","next","script","onreadystatechange","parentNode","removeChild","Disposable","disposed_","disposeInternal","object","target","key","source","arguments","opt_obj","parts","split","reduce","part","mappedObj","keys","Object","obj1","obj2","keys1","keys2","string","str1","str2","test1","toLowerCase","test2","replace","x","floor","abs","Date","now","hash","len","charCodeAt","value","Embodied","body_","JSON","stringify","body","FilterBody","field","operatorOrValue","opt_value","core","createBody_","operator","opt_filter","addArrayOperator_","filter","filters","add","Geo","upperLeft","lowerRight","BoundingBox","center","radius","Circle","points","Line","lat","lon","Point","Polygon","map","toBody","point","coordinates","addCoordinates_","Range","from","opt_to","to","Filter","fieldOrFilter","opt_operatorOrValue","toFilter","addMany","getObject","values","slice","boxOrUpperLeft","opt_lowerRight","polygon","getPoints","locationOrCircle","opt_rangeOrDistance","range","getCenter","getRadius","distanceInternal_","min","max","fieldOrQuery","opt_queryOrFuzziness","opt_fuzziness","fuzzyInternal_","arg2IsString","fuzziness","ALL","opt_query","query","rangeOrMin","opt_max","shapes","shape","parseFromAnchor","opt_uri","link","href","hostname","password","pathname","port","search","username","parse","URL","create","MultiMap","size","names","set","TreeNode","value_","parent_","children_","child","setParent","node","current","getParent","ancestors","index","getChildren","EMPTY_ARRAY","depth","root","getChildCount","remove","parent","opt_preorderFn","opt_postorderFn","forEach","traverse","assertChildHasNoParent","parseFn_","Uri","url","maybeAddProtocolAndHostname_","multimap","getAll","addParameterValue","ensureQueryInitialized_","param","urlDecode","getHostname","getPort","HOSTNAME_PLACEHOLDER","getHost","getProtocol","get","querystring","getParameterNames","getParameterValues","encodeURIComponent","contains","setParameterValue","RANDOM_PARAM","getRandomString","DEFAULT_PROTOCOL","charAt","removeParameter","getPathname","getSearch","getHash","parsed","substr","normalizeObject","parseFn","basePath","paths","path","concat","join","decodeURIComponent","assertBrowserEnvironment","assertDefAndNotNull","errorMessage","assertFunction","assertObject","assertResponseSucceeded","response","succeeded","assertUserSignedIn","user","assertUriWithNoPath","uri","Auth","tokenOrEmail","opt_password","token","email","createdAt","photoUrl","wedeployClient","authUrl_","getId","auth","patch","delete","tokenOrUsername","ApiHelper","authOrTokenOrEmail","helperAuthScope","AuthProvider","provider","providerScope","redirectUri","opt_authUrl","setPathname","hasProvider","getProvider","hasProviderScope","getProviderScope","hasRedirectUri","getRedirectUri","hasScope","getScope","assertStringIfDefAndNotNull","FacebookAuthProvider","PROVIDER","GithubAuthProvider","GoogleAuthProvider","StorageMechanism","Storage","mechanism","clear","json","ErrorCode","INVALID_VALUE","assertMechanismDefAndNotNull","assertMechanismIntanceOf","LocalStorageMechanism","localStorage","storage","getItem","removeItem","setItem","isSupported","AuthApiHelper","currentUser","onSignInCallback","onSignOutCallback","processSignIn_","post","makeUserAuthFromData","fragment","userId","resolveAuthScope","setWedeployClient","setCreatedAt","setEmail","setId","setName","setPhotoUrl","setToken","redirectAccessToken","getRedirectAccessToken_","removeUrlFragmentCompletely_","loadCurrentUser","maybeCallOnSignInCallback_","history","pushState","title","access_token","setRedirectUri","getHrefWithoutFragment_","makeAuthorizationUrl","maybeCallOnSignOutCallback_","unloadCurrentUser_","assertSupportedProvider","Aggregation","field_","operator_","ranges","DistanceAggregation","interval","RangeAggregation","rangeOrFrom","unit","Query","aggregationOrField","opt_operator","aggregation","getField","getOperator","getValue","offset","highlight","limit","filterOrTextOrField","opt_textOrOperator","match","opt_direction","sort","sortEntry","aggregate","DataApiHelper","getOrCreateFilter_","and","or","args","where","none","similar","lt","lte","any","boundingBox","distance","getOrCreateQuery_","collection","dataUrl_","put","addFiltersToQuery_","query_","onSearch_","opt_options","watch","filter_","toSearch_","Base64","btoa","Buffer","Thenable","IMPLEMENTED_BY_PROP","addImplementation","ctor","$goog_Thenable","isImplementedBy","partial","newArgs","apply","CancellablePromise","resolver","state_","State_","PENDING","result_","callbackEntries_","executing_","UNHANDLED_REJECTION_DELAY","unhandledRejectionId_","hadUnhandledRejection_","self","resolve_","FULFILLED","reason","REJECTED","CallbackEntry_","resolve","reject","opt_reason","race","promises","promise","all","toFulfill","onFulfill","onReject","firstFulfilled","toReject","reasons","opt_onFulfilled","opt_onRejected","addChildPromise_","thenAlways","onResolved","err","handleRejection_","addCallbackEntry_","thenCatch","onRejected","catch","cancel","opt_message","CancellationError","IS_CANCELLATION_ERROR","cancelInternal_","cancelChild_","childPromise","childCount","childIndex","entry","callbackEntry","executeCallback_","scheduleCallbacks_","onFulfilled","result","unblockAndFulfill_","BLOCKED","unblockAndReject_","state","TypeError","tryThen_","addUnhandledRejection_","thenable","called","executeCallbacks_","entries","removeUnhandledRejection_","p","setTimeout","setUnhandledRejectionHandler","handler","Ajax","allHeaders","headers","pairs","method","opt_headers","opt_params","opt_timeout","opt_sync","opt_withCredentials","request","XMLHttpRequest","Promise","onload","aborted","onerror","error","abort","timeout","addParametersFromMultiMap","withCredentials","setRequestHeader","send","Transport","ClientMessage","headers_","opt_body","ClientResponse","clientRequest","clientRequest_","opt_statusCode","statusCode_","opt_statusText","statusText_","statusCode","AjaxTransport","deferred","params","clientResponse","responseText","status","statusText","parseResponseHeaders","getAllResponseHeaders","header","TransportFactory","transports","DEFAULT_TRANSPORT_NAME","implementationName","TransportClass","instance_","ClientRequest","params_","withCredentials_","opt_method","method_","DEFAULT_METHOD","opt_url","url_","io","WeDeploy","auth_","joinPaths","formData_","encode","isContentTypeJson","sendAsync","FormData","maybeWrapWithQuery_","convertBodyToParams_","removeBody","encodeParams_","resolveAuthentication_","append","embodied","use","customTransport_","hasToken","credentials","encodeString","transport","instance","getDefault","createClientRequest_","decode","opt_dataUrl","data_","clientMessage","contentType","socket"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}